// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    private static var __once: () = {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> DateFormatter in
                let formatter = DateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self)  { (source: Any) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.date(from: sourceString) {
                            return date as NSDate
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return Date(timeIntervalSince1970: Double(sourceInt / 1000) ) as NSDate
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [AckEnvelope]
            Decoders.addDecoder(clazz: [AckEnvelope].self)  { (source: Any) -> [AckEnvelope] in
                return Decoders.decode(clazz: [AckEnvelope].self, source: source)
            }
            // Decoder for AckEnvelope
            Decoders.addDecoder(clazz: AckEnvelope.self)  { (source: Any) -> AckEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = AckEnvelope()
                instance.data = Decoders.decodeOptional(clazz: Acknowledgement.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [Acknowledgement]
            Decoders.addDecoder(clazz: [Acknowledgement].self)  { (source: Any) -> [Acknowledgement] in
                return Decoders.decode(clazz: [Acknowledgement].self, source: source)
            }
            // Decoder for Acknowledgement
            Decoders.addDecoder(clazz: Acknowledgement.self)  { (source: Any) -> Acknowledgement in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = Acknowledgement()
                instance.mid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mid"])
                instance.cid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cid"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                return instance
            }


            // Decoder for [Action]
            Decoders.addDecoder(clazz: [Action].self)  { (source: Any) -> [Action] in
                return Decoders.decode(clazz: [Action].self, source: source)
            }
            // Decoder for Action
            Decoders.addDecoder(clazz: Action.self)  { (source: Any) -> Action in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = Action()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.parameters = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["parameters"])
                return instance
            }


            // Decoder for [ActionArray]
            Decoders.addDecoder(clazz: [ActionArray].self)  { (source: Any) -> [ActionArray] in
                return Decoders.decode(clazz: [ActionArray].self, source: source)
            }
            // Decoder for ActionArray
            Decoders.addDecoder(clazz: ActionArray.self)  { (source: Any) -> ActionArray in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ActionArray()
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                return instance
            }


            // Decoder for [ActionDetails]
            Decoders.addDecoder(clazz: [ActionDetails].self)  { (source: Any) -> [ActionDetails] in
                return Decoders.decode(clazz: [ActionDetails].self, source: source)
            }
            // Decoder for ActionDetails
            Decoders.addDecoder(clazz: ActionDetails.self)  { (source: Any) -> ActionDetails in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ActionDetails()
                instance.parameters = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["parameters"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [ActionDetailsArray]
            Decoders.addDecoder(clazz: [ActionDetailsArray].self)  { (source: Any) -> [ActionDetailsArray] in
                return Decoders.decode(clazz: [ActionDetailsArray].self, source: source)
            }
            // Decoder for ActionDetailsArray
            Decoders.addDecoder(clazz: ActionDetailsArray.self)  { (source: Any) -> ActionDetailsArray in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ActionDetailsArray()
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                return instance
            }


            // Decoder for [ActionIn]
            Decoders.addDecoder(clazz: [ActionIn].self)  { (source: Any) -> [ActionIn] in
                return Decoders.decode(clazz: [ActionIn].self, source: source)
            }
            // Decoder for ActionIn
            Decoders.addDecoder(clazz: ActionIn.self)  { (source: Any) -> ActionIn in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ActionIn()
                instance.data = Decoders.decodeOptional(clazz: ActionDetailsArray.self, source: sourceDictionary["data"])
                instance.cid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cid"])
                instance.ddid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ddid"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [ActionOut]
            Decoders.addDecoder(clazz: [ActionOut].self)  { (source: Any) -> [ActionOut] in
                return Decoders.decode(clazz: [ActionOut].self, source: source)
            }
            // Decoder for ActionOut
            Decoders.addDecoder(clazz: ActionOut.self)  { (source: Any) -> ActionOut in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ActionOut()
                instance.mid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mid"])
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                instance.sdtid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdtid"])
                instance.cts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["cts"])
                instance.mv = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["mv"])
                return instance
            }


            // Decoder for [Actions]
            Decoders.addDecoder(clazz: [Actions].self)  { (source: Any) -> [Actions] in
                return Decoders.decode(clazz: [Actions].self, source: source)
            }
            // Decoder for Actions
            Decoders.addDecoder(clazz: Actions.self)  { (source: Any) -> Actions in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = Actions()
                instance.data = Decoders.decodeOptional(clazz: ActionArray.self, source: sourceDictionary["data"])
                instance.ddid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ddid"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [AggregateData]
            Decoders.addDecoder(clazz: [AggregateData].self)  { (source: Any) -> [AggregateData] in
                return Decoders.decode(clazz: [AggregateData].self, source: source)
            }
            // Decoder for AggregateData
            Decoders.addDecoder(clazz: AggregateData.self)  { (source: Any) -> AggregateData in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = AggregateData()
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.max = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["max"])
                instance.mean = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["mean"])
                instance.min = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["min"])
                instance.sum = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["sum"])
                instance.variance = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["variance"])
                return instance
            }


            // Decoder for [AggregatesHistogramData]
            Decoders.addDecoder(clazz: [AggregatesHistogramData].self)  { (source: Any) -> [AggregatesHistogramData] in
                return Decoders.decode(clazz: [AggregatesHistogramData].self, source: source)
            }
            // Decoder for AggregatesHistogramData
            Decoders.addDecoder(clazz: AggregatesHistogramData.self)  { (source: Any) -> AggregatesHistogramData in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = AggregatesHistogramData()
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.max = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["max"])
                instance.mean = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["mean"])
                instance.min = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["min"])
                instance.sum = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["sum"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                instance.variance = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["variance"])
                return instance
            }


            // Decoder for [AggregatesHistogramResponse]
            Decoders.addDecoder(clazz: [AggregatesHistogramResponse].self)  { (source: Any) -> [AggregatesHistogramResponse] in
                return Decoders.decode(clazz: [AggregatesHistogramResponse].self, source: source)
            }
            // Decoder for AggregatesHistogramResponse
            Decoders.addDecoder(clazz: AggregatesHistogramResponse.self)  { (source: Any) -> AggregatesHistogramResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = AggregatesHistogramResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["endDate"])
                instance.field = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["field"])
                instance.interval = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["interval"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["size"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["startDate"])
                return instance
            }


            // Decoder for [AggregatesResponse]
            Decoders.addDecoder(clazz: [AggregatesResponse].self)  { (source: Any) -> [AggregatesResponse] in
                return Decoders.decode(clazz: [AggregatesResponse].self, source: source)
            }
            // Decoder for AggregatesResponse
            Decoders.addDecoder(clazz: AggregatesResponse.self)  { (source: Any) -> AggregatesResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = AggregatesResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["endDate"])
                instance.field = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["field"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["startDate"])
                return instance
            }


            // Decoder for [AppProperties]
            Decoders.addDecoder(clazz: [AppProperties].self)  { (source: Any) -> [AppProperties] in
                return Decoders.decode(clazz: [AppProperties].self, source: source)
            }
            // Decoder for AppProperties
            Decoders.addDecoder(clazz: AppProperties.self)  { (source: Any) -> AppProperties in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = AppProperties()
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                instance.aid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aid"])
                instance.properties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [CheckTokenMessage]
            Decoders.addDecoder(clazz: [CheckTokenMessage].self)  { (source: Any) -> [CheckTokenMessage] in
                return Decoders.decode(clazz: [CheckTokenMessage].self, source: source)
            }
            // Decoder for CheckTokenMessage
            Decoders.addDecoder(clazz: CheckTokenMessage.self)  { (source: Any) -> CheckTokenMessage in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = CheckTokenMessage()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [CheckTokenResponse]
            Decoders.addDecoder(clazz: [CheckTokenResponse].self)  { (source: Any) -> [CheckTokenResponse] in
                return Decoders.decode(clazz: [CheckTokenResponse].self, source: source)
            }
            // Decoder for CheckTokenResponse
            Decoders.addDecoder(clazz: CheckTokenResponse.self)  { (source: Any) -> CheckTokenResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = CheckTokenResponse()
                instance.data = Decoders.decodeOptional(clazz: CheckTokenMessage.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [Device]
            Decoders.addDecoder(clazz: [Device].self)  { (source: Any) -> [Device] in
                return Decoders.decode(clazz: [Device].self, source: source)
            }
            // Decoder for Device
            Decoders.addDecoder(clazz: Device.self)  { (source: Any) -> Device in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = Device()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                instance.dtid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dtid"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.manifestVersion = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["manifestVersion"])
                instance.manifestVersionPolicy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["manifestVersionPolicy"])
                instance.needProviderAuth = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["needProviderAuth"])
                instance.cloudAuthorization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cloudAuthorization"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                instance.createdOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["createdOn"])
                instance.connected = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["connected"])
                instance.certificateInfo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificateInfo"])
                instance.certificateSignature = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificateSignature"])
                instance.eid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eid"])
                instance.providerCredentials = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["providerCredentials"])
                instance.deviceTypeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceTypeName"])
                return instance
            }


            // Decoder for [DeviceArray]
            Decoders.addDecoder(clazz: [DeviceArray].self)  { (source: Any) -> [DeviceArray] in
                return Decoders.decode(clazz: [DeviceArray].self, source: source)
            }
            // Decoder for DeviceArray
            Decoders.addDecoder(clazz: DeviceArray.self)  { (source: Any) -> DeviceArray in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceArray()
                instance.devices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["devices"])
                return instance
            }


            // Decoder for [DeviceEnvelope]
            Decoders.addDecoder(clazz: [DeviceEnvelope].self)  { (source: Any) -> [DeviceEnvelope] in
                return Decoders.decode(clazz: [DeviceEnvelope].self, source: source)
            }
            // Decoder for DeviceEnvelope
            Decoders.addDecoder(clazz: DeviceEnvelope.self)  { (source: Any) -> DeviceEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceEnvelope()
                instance.data = Decoders.decodeOptional(clazz: Device.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [DeviceRegCompleteRequest]
            Decoders.addDecoder(clazz: [DeviceRegCompleteRequest].self)  { (source: Any) -> [DeviceRegCompleteRequest] in
                return Decoders.decode(clazz: [DeviceRegCompleteRequest].self, source: source)
            }
            // Decoder for DeviceRegCompleteRequest
            Decoders.addDecoder(clazz: DeviceRegCompleteRequest.self)  { (source: Any) -> DeviceRegCompleteRequest in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceRegCompleteRequest()
                instance.nonce = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nonce"])
                return instance
            }


            // Decoder for [DeviceRegConfirmUserRequest]
            Decoders.addDecoder(clazz: [DeviceRegConfirmUserRequest].self)  { (source: Any) -> [DeviceRegConfirmUserRequest] in
                return Decoders.decode(clazz: [DeviceRegConfirmUserRequest].self, source: source)
            }
            // Decoder for DeviceRegConfirmUserRequest
            Decoders.addDecoder(clazz: DeviceRegConfirmUserRequest.self)  { (source: Any) -> DeviceRegConfirmUserRequest in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceRegConfirmUserRequest()
                instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"])
                instance.deviceName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceName"])
                instance.pin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pin"])
                return instance
            }


            // Decoder for [DeviceRegConfirmUserResponse]
            Decoders.addDecoder(clazz: [DeviceRegConfirmUserResponse].self)  { (source: Any) -> [DeviceRegConfirmUserResponse] in
                return Decoders.decode(clazz: [DeviceRegConfirmUserResponse].self, source: source)
            }
            // Decoder for DeviceRegConfirmUserResponse
            Decoders.addDecoder(clazz: DeviceRegConfirmUserResponse.self)  { (source: Any) -> DeviceRegConfirmUserResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceRegConfirmUserResponse()
                instance.rid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rid"])
                return instance
            }


            // Decoder for [DeviceRegConfirmUserResponseEnvelope]
            Decoders.addDecoder(clazz: [DeviceRegConfirmUserResponseEnvelope].self)  { (source: Any) -> [DeviceRegConfirmUserResponseEnvelope] in
                return Decoders.decode(clazz: [DeviceRegConfirmUserResponseEnvelope].self, source: source)
            }
            // Decoder for DeviceRegConfirmUserResponseEnvelope
            Decoders.addDecoder(clazz: DeviceRegConfirmUserResponseEnvelope.self)  { (source: Any) -> DeviceRegConfirmUserResponseEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceRegConfirmUserResponseEnvelope()
                instance.data = Decoders.decodeOptional(clazz: DeviceRegConfirmUserResponse.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [DeviceRegStatusResponse]
            Decoders.addDecoder(clazz: [DeviceRegStatusResponse].self)  { (source: Any) -> [DeviceRegStatusResponse] in
                return Decoders.decode(clazz: [DeviceRegStatusResponse].self, source: source)
            }
            // Decoder for DeviceRegStatusResponse
            Decoders.addDecoder(clazz: DeviceRegStatusResponse.self)  { (source: Any) -> DeviceRegStatusResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceRegStatusResponse()
                instance.did = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["did"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [DeviceRegStatusResponseEnvelope]
            Decoders.addDecoder(clazz: [DeviceRegStatusResponseEnvelope].self)  { (source: Any) -> [DeviceRegStatusResponseEnvelope] in
                return Decoders.decode(clazz: [DeviceRegStatusResponseEnvelope].self, source: source)
            }
            // Decoder for DeviceRegStatusResponseEnvelope
            Decoders.addDecoder(clazz: DeviceRegStatusResponseEnvelope.self)  { (source: Any) -> DeviceRegStatusResponseEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceRegStatusResponseEnvelope()
                instance.data = Decoders.decodeOptional(clazz: DeviceRegStatusResponse.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [DeviceTask]
            Decoders.addDecoder(clazz: [DeviceTask].self)  { (source: Any) -> [DeviceTask] in
                return Decoders.decode(clazz: [DeviceTask].self, source: source)
            }
            // Decoder for DeviceTask
            Decoders.addDecoder(clazz: DeviceTask.self)  { (source: Any) -> DeviceTask in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceTask()
                instance.numAttempts = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numAttempts"])
                instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorMessage"])
                instance.errorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorCode"])
                instance.did = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["did"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                return instance
            }


            // Decoder for [DeviceTaskUpdateRequest]
            Decoders.addDecoder(clazz: [DeviceTaskUpdateRequest].self)  { (source: Any) -> [DeviceTaskUpdateRequest] in
                return Decoders.decode(clazz: [DeviceTaskUpdateRequest].self, source: source)
            }
            // Decoder for DeviceTaskUpdateRequest
            Decoders.addDecoder(clazz: DeviceTaskUpdateRequest.self)  { (source: Any) -> DeviceTaskUpdateRequest in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceTaskUpdateRequest()
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [DeviceTaskUpdateResponse]
            Decoders.addDecoder(clazz: [DeviceTaskUpdateResponse].self)  { (source: Any) -> [DeviceTaskUpdateResponse] in
                return Decoders.decode(clazz: [DeviceTaskUpdateResponse].self, source: source)
            }
            // Decoder for DeviceTaskUpdateResponse
            Decoders.addDecoder(clazz: DeviceTaskUpdateResponse.self)  { (source: Any) -> DeviceTaskUpdateResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceTaskUpdateResponse()
                instance.data = Decoders.decodeOptional(clazz: TaskStatus.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [DeviceToken]
            Decoders.addDecoder(clazz: [DeviceToken].self)  { (source: Any) -> [DeviceToken] in
                return Decoders.decode(clazz: [DeviceToken].self, source: source)
            }
            // Decoder for DeviceToken
            Decoders.addDecoder(clazz: DeviceToken.self)  { (source: Any) -> DeviceToken in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceToken()
                instance.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessToken"])
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                instance.did = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["did"])
                instance.cid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cid"])
                return instance
            }


            // Decoder for [DeviceTokenEnvelope]
            Decoders.addDecoder(clazz: [DeviceTokenEnvelope].self)  { (source: Any) -> [DeviceTokenEnvelope] in
                return Decoders.decode(clazz: [DeviceTokenEnvelope].self, source: source)
            }
            // Decoder for DeviceTokenEnvelope
            Decoders.addDecoder(clazz: DeviceTokenEnvelope.self)  { (source: Any) -> DeviceTokenEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceTokenEnvelope()
                instance.data = Decoders.decodeOptional(clazz: DeviceToken.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [DeviceType]
            Decoders.addDecoder(clazz: [DeviceType].self)  { (source: Any) -> [DeviceType] in
                return Decoders.decode(clazz: [DeviceType].self, source: source)
            }
            // Decoder for DeviceType
            Decoders.addDecoder(clazz: DeviceType.self)  { (source: Any) -> DeviceType in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceType()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.uniqueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uniqueName"])
                instance.latestVersion = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["latestVersion"])
                instance.lastUpdated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["lastUpdated"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                instance.oid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["oid"])
                instance.hasCloudConnector = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasCloudConnector"])
                instance.approved = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["approved"])
                instance.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"])
                instance.protected = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["protected"])
                instance.inStore = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inStore"])
                instance.ownedByCurrentUser = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ownedByCurrentUser"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.rsp = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["rsp"])
                instance.issuerDn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["issuerDn"])
                instance.vid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vid"])
                return instance
            }


            // Decoder for [DeviceTypeArray]
            Decoders.addDecoder(clazz: [DeviceTypeArray].self)  { (source: Any) -> [DeviceTypeArray] in
                return Decoders.decode(clazz: [DeviceTypeArray].self, source: source)
            }
            // Decoder for DeviceTypeArray
            Decoders.addDecoder(clazz: DeviceTypeArray.self)  { (source: Any) -> DeviceTypeArray in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceTypeArray()
                instance.deviceTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["deviceTypes"])
                return instance
            }


            // Decoder for [DeviceTypeEnvelope]
            Decoders.addDecoder(clazz: [DeviceTypeEnvelope].self)  { (source: Any) -> [DeviceTypeEnvelope] in
                return Decoders.decode(clazz: [DeviceTypeEnvelope].self, source: source)
            }
            // Decoder for DeviceTypeEnvelope
            Decoders.addDecoder(clazz: DeviceTypeEnvelope.self)  { (source: Any) -> DeviceTypeEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceTypeEnvelope()
                instance.data = Decoders.decodeOptional(clazz: DeviceType.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [DeviceTypeInfo]
            Decoders.addDecoder(clazz: [DeviceTypeInfo].self)  { (source: Any) -> [DeviceTypeInfo] in
                return Decoders.decode(clazz: [DeviceTypeInfo].self, source: source)
            }
            // Decoder for DeviceTypeInfo
            Decoders.addDecoder(clazz: DeviceTypeInfo.self)  { (source: Any) -> DeviceTypeInfo in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceTypeInfo()
                instance.devicePropertiesEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["devicePropertiesEnabled"])
                instance.pmax = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pmax"])
                instance.modifiedOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["modifiedOn"])
                instance.dtid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dtid"])
                instance.pmin = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pmin"])
                instance.taskExpiresAfter = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["taskExpiresAfter"])
                instance.createdOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["createdOn"])
                return instance
            }


            // Decoder for [DeviceTypeInfoEnvelope]
            Decoders.addDecoder(clazz: [DeviceTypeInfoEnvelope].self)  { (source: Any) -> [DeviceTypeInfoEnvelope] in
                return Decoders.decode(clazz: [DeviceTypeInfoEnvelope].self, source: source)
            }
            // Decoder for DeviceTypeInfoEnvelope
            Decoders.addDecoder(clazz: DeviceTypeInfoEnvelope.self)  { (source: Any) -> DeviceTypeInfoEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceTypeInfoEnvelope()
                instance.data = Decoders.decodeOptional(clazz: DeviceTypeInfo.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [DeviceTypesEnvelope]
            Decoders.addDecoder(clazz: [DeviceTypesEnvelope].self)  { (source: Any) -> [DeviceTypesEnvelope] in
                return Decoders.decode(clazz: [DeviceTypesEnvelope].self, source: source)
            }
            // Decoder for DeviceTypesEnvelope
            Decoders.addDecoder(clazz: DeviceTypesEnvelope.self)  { (source: Any) -> DeviceTypesEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceTypesEnvelope()
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.data = Decoders.decodeOptional(clazz: DeviceTypeArray.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [DeviceTypesInfo]
            Decoders.addDecoder(clazz: [DeviceTypesInfo].self)  { (source: Any) -> [DeviceTypesInfo] in
                return Decoders.decode(clazz: [DeviceTypesInfo].self, source: source)
            }
            // Decoder for DeviceTypesInfo
            Decoders.addDecoder(clazz: DeviceTypesInfo.self)  { (source: Any) -> DeviceTypesInfo in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceTypesInfo()
                instance.devicePropertiesEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["devicePropertiesEnabled"])
                instance.pmax = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pmax"])
                instance.modifiedOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["modifiedOn"])
                instance.dtid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dtid"])
                instance.pmin = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pmin"])
                instance.taskExpiresAfter = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["taskExpiresAfter"])
                instance.createdOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["createdOn"])
                return instance
            }


            // Decoder for [DeviceTypesInfoEnvelope]
            Decoders.addDecoder(clazz: [DeviceTypesInfoEnvelope].self)  { (source: Any) -> [DeviceTypesInfoEnvelope] in
                return Decoders.decode(clazz: [DeviceTypesInfoEnvelope].self, source: source)
            }
            // Decoder for DeviceTypesInfoEnvelope
            Decoders.addDecoder(clazz: DeviceTypesInfoEnvelope.self)  { (source: Any) -> DeviceTypesInfoEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DeviceTypesInfoEnvelope()
                instance.data = Decoders.decodeOptional(clazz: DeviceTypesInfo.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [DevicesEnvelope]
            Decoders.addDecoder(clazz: [DevicesEnvelope].self)  { (source: Any) -> [DevicesEnvelope] in
                return Decoders.decode(clazz: [DevicesEnvelope].self, source: source)
            }
            // Decoder for DevicesEnvelope
            Decoders.addDecoder(clazz: DevicesEnvelope.self)  { (source: Any) -> DevicesEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = DevicesEnvelope()
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.data = Decoders.decodeOptional(clazz: DeviceArray.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [ErrorEnvelope]
            Decoders.addDecoder(clazz: [ErrorEnvelope].self)  { (source: Any) -> [ErrorEnvelope] in
                return Decoders.decode(clazz: [ErrorEnvelope].self, source: source)
            }
            // Decoder for ErrorEnvelope
            Decoders.addDecoder(clazz: ErrorEnvelope.self)  { (source: Any) -> ErrorEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ErrorEnvelope()
                instance.error = Decoders.decodeOptional(clazz: WebSocketError.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [EventFeedData]
            Decoders.addDecoder(clazz: [EventFeedData].self)  { (source: Any) -> [EventFeedData] in
                return Decoders.decode(clazz: [EventFeedData].self, source: source)
            }
            // Decoder for EventFeedData
            Decoders.addDecoder(clazz: EventFeedData.self)  { (source: Any) -> EventFeedData in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = EventFeedData()
                instance.event = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [ExportData]
            Decoders.addDecoder(clazz: [ExportData].self)  { (source: Any) -> [ExportData] in
                return Decoders.decode(clazz: [ExportData].self, source: source)
            }
            // Decoder for ExportData
            Decoders.addDecoder(clazz: ExportData.self)  { (source: Any) -> ExportData in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ExportData()
                instance.expirationDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["expirationDate"])
                instance.exportId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exportId"])
                instance.fileSize = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["fileSize"])
                instance.md5 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["md5"])
                instance.request = Decoders.decodeOptional(clazz: ExportRequest.self, source: sourceDictionary["request"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.totalMessages = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["totalMessages"])
                return instance
            }


            // Decoder for [ExportDataArray]
            Decoders.addDecoder(clazz: [ExportDataArray].self)  { (source: Any) -> [ExportDataArray] in
                return Decoders.decode(clazz: [ExportDataArray].self, source: source)
            }
            // Decoder for ExportDataArray
            Decoders.addDecoder(clazz: ExportDataArray.self)  { (source: Any) -> ExportDataArray in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ExportDataArray()
                instance.exports = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["exports"])
                return instance
            }


            // Decoder for [ExportHistoryResponse]
            Decoders.addDecoder(clazz: [ExportHistoryResponse].self)  { (source: Any) -> [ExportHistoryResponse] in
                return Decoders.decode(clazz: [ExportHistoryResponse].self, source: source)
            }
            // Decoder for ExportHistoryResponse
            Decoders.addDecoder(clazz: ExportHistoryResponse.self)  { (source: Any) -> ExportHistoryResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ExportHistoryResponse()
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.data = Decoders.decodeOptional(clazz: ExportDataArray.self, source: sourceDictionary["data"])
                instance.offset = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["offset"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                return instance
            }


            // Decoder for [ExportNormalizedMessagesResponse]
            Decoders.addDecoder(clazz: [ExportNormalizedMessagesResponse].self)  { (source: Any) -> [ExportNormalizedMessagesResponse] in
                return Decoders.decode(clazz: [ExportNormalizedMessagesResponse].self, source: source)
            }
            // Decoder for ExportNormalizedMessagesResponse
            Decoders.addDecoder(clazz: ExportNormalizedMessagesResponse.self)  { (source: Any) -> ExportNormalizedMessagesResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ExportNormalizedMessagesResponse()
                instance.csvHeaders = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["csvHeaders"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["endDate"])
                instance.exportId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exportId"])
                instance.format = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["format"])
                instance.order = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.sdids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdids"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["startDate"])
                instance.stdids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stdids"])
                instance.trialId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trialId"])
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                instance.uids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uids"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [ExportRequest]
            Decoders.addDecoder(clazz: [ExportRequest].self)  { (source: Any) -> [ExportRequest] in
                return Decoders.decode(clazz: [ExportRequest].self, source: source)
            }
            // Decoder for ExportRequest
            Decoders.addDecoder(clazz: ExportRequest.self)  { (source: Any) -> ExportRequest in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ExportRequest()
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["endDate"])
                instance.format = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["format"])
                instance.order = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order"])
                instance.sdids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdids"])
                instance.sdtids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdtids"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["startDate"])
                instance.trialId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trialId"])
                instance.uids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uids"])
                return instance
            }


            // Decoder for [ExportRequestData]
            Decoders.addDecoder(clazz: [ExportRequestData].self)  { (source: Any) -> [ExportRequestData] in
                return Decoders.decode(clazz: [ExportRequestData].self, source: source)
            }
            // Decoder for ExportRequestData
            Decoders.addDecoder(clazz: ExportRequestData.self)  { (source: Any) -> ExportRequestData in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ExportRequestData()
                instance.csvHeaders = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["csvHeaders"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["endDate"])
                instance.exportId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exportId"])
                instance.format = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["format"])
                instance.order = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order"])
                instance.sdids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdids"])
                instance.sdtids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdtids"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["startDate"])
                instance.trialId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trialId"])
                instance.uids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uids"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [ExportRequestInfo]
            Decoders.addDecoder(clazz: [ExportRequestInfo].self)  { (source: Any) -> [ExportRequestInfo] in
                return Decoders.decode(clazz: [ExportRequestInfo].self, source: source)
            }
            // Decoder for ExportRequestInfo
            Decoders.addDecoder(clazz: ExportRequestInfo.self)  { (source: Any) -> ExportRequestInfo in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ExportRequestInfo()
                instance.csvHeaders = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["csvHeaders"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["endDate"])
                instance.format = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["format"])
                instance.order = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order"])
                instance.sdids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdids"])
                instance.sdtids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdtids"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["startDate"])
                instance.trialId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trialId"])
                instance.uids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uids"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [ExportRequestResponse]
            Decoders.addDecoder(clazz: [ExportRequestResponse].self)  { (source: Any) -> [ExportRequestResponse] in
                return Decoders.decode(clazz: [ExportRequestResponse].self, source: source)
            }
            // Decoder for ExportRequestResponse
            Decoders.addDecoder(clazz: ExportRequestResponse.self)  { (source: Any) -> ExportRequestResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ExportRequestResponse()
                instance.data = Decoders.decodeOptional(clazz: ExportRequestData.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [ExportResponse]
            Decoders.addDecoder(clazz: [ExportResponse].self)  { (source: Any) -> [ExportResponse] in
                return Decoders.decode(clazz: [ExportResponse].self, source: source)
            }
            // Decoder for ExportResponse
            Decoders.addDecoder(clazz: ExportResponse.self)  { (source: Any) -> ExportResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ExportResponse()
                instance.csvHeaders = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["csvHeaders"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["endDate"])
                instance.exportId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exportId"])
                instance.format = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["format"])
                instance.order = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order"])
                instance.sdids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdids"])
                instance.sdtids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdtids"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["startDate"])
                instance.trialId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trialId"])
                instance.uids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uids"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [ExportStatusResponse]
            Decoders.addDecoder(clazz: [ExportStatusResponse].self)  { (source: Any) -> [ExportStatusResponse] in
                return Decoders.decode(clazz: [ExportStatusResponse].self, source: source)
            }
            // Decoder for ExportStatusResponse
            Decoders.addDecoder(clazz: ExportStatusResponse.self)  { (source: Any) -> ExportStatusResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ExportStatusResponse()
                instance.expirationDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["expirationDate"])
                instance.exportId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exportId"])
                instance.md5 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["md5"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.ttl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ttl"])
                return instance
            }


            // Decoder for [FieldPath]
            Decoders.addDecoder(clazz: [FieldPath].self)  { (source: Any) -> [FieldPath] in
                return Decoders.decode(clazz: [FieldPath].self, source: source)
            }
            // Decoder for FieldPath
            Decoders.addDecoder(clazz: FieldPath.self)  { (source: Any) -> FieldPath in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = FieldPath()
                instance.path = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["path"])
                return instance
            }


            // Decoder for [FieldPresence]
            Decoders.addDecoder(clazz: [FieldPresence].self)  { (source: Any) -> [FieldPresence] in
                return Decoders.decode(clazz: [FieldPresence].self, source: source)
            }
            // Decoder for FieldPresence
            Decoders.addDecoder(clazz: FieldPresence.self)  { (source: Any) -> FieldPresence in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = FieldPresence()
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["startDate"])
                return instance
            }


            // Decoder for [FieldPresenceEnvelope]
            Decoders.addDecoder(clazz: [FieldPresenceEnvelope].self)  { (source: Any) -> [FieldPresenceEnvelope] in
                return Decoders.decode(clazz: [FieldPresenceEnvelope].self, source: source)
            }
            // Decoder for FieldPresenceEnvelope
            Decoders.addDecoder(clazz: FieldPresenceEnvelope.self)  { (source: Any) -> FieldPresenceEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = FieldPresenceEnvelope()
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.fieldPresence = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldPresence"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["startDate"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["endDate"])
                instance.interval = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["interval"])
                instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["size"])
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [FieldsActions]
            Decoders.addDecoder(clazz: [FieldsActions].self)  { (source: Any) -> [FieldsActions] in
                return Decoders.decode(clazz: [FieldsActions].self, source: source)
            }
            // Decoder for FieldsActions
            Decoders.addDecoder(clazz: FieldsActions.self)  { (source: Any) -> FieldsActions in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = FieldsActions()
                instance.fields = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["fields"])
                instance.actions = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["actions"])
                return instance
            }


            // Decoder for [ManifestProperties]
            Decoders.addDecoder(clazz: [ManifestProperties].self)  { (source: Any) -> [ManifestProperties] in
                return Decoders.decode(clazz: [ManifestProperties].self, source: source)
            }
            // Decoder for ManifestProperties
            Decoders.addDecoder(clazz: ManifestProperties.self)  { (source: Any) -> ManifestProperties in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ManifestProperties()
                instance.properties = Decoders.decodeOptional(clazz: FieldsActions.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ManifestPropertiesEnvelope]
            Decoders.addDecoder(clazz: [ManifestPropertiesEnvelope].self)  { (source: Any) -> [ManifestPropertiesEnvelope] in
                return Decoders.decode(clazz: [ManifestPropertiesEnvelope].self, source: source)
            }
            // Decoder for ManifestPropertiesEnvelope
            Decoders.addDecoder(clazz: ManifestPropertiesEnvelope.self)  { (source: Any) -> ManifestPropertiesEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ManifestPropertiesEnvelope()
                instance.data = Decoders.decodeOptional(clazz: ManifestProperties.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [ManifestVersions]
            Decoders.addDecoder(clazz: [ManifestVersions].self)  { (source: Any) -> [ManifestVersions] in
                return Decoders.decode(clazz: [ManifestVersions].self, source: source)
            }
            // Decoder for ManifestVersions
            Decoders.addDecoder(clazz: ManifestVersions.self)  { (source: Any) -> ManifestVersions in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ManifestVersions()
                instance.versions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["versions"])
                return instance
            }


            // Decoder for [ManifestVersionsEnvelope]
            Decoders.addDecoder(clazz: [ManifestVersionsEnvelope].self)  { (source: Any) -> [ManifestVersionsEnvelope] in
                return Decoders.decode(clazz: [ManifestVersionsEnvelope].self, source: source)
            }
            // Decoder for ManifestVersionsEnvelope
            Decoders.addDecoder(clazz: ManifestVersionsEnvelope.self)  { (source: Any) -> ManifestVersionsEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = ManifestVersionsEnvelope()
                instance.data = Decoders.decodeOptional(clazz: ManifestVersions.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [Message]
            Decoders.addDecoder(clazz: [Message].self)  { (source: Any) -> [Message] in
                return Decoders.decode(clazz: [Message].self, source: source)
            }
            // Decoder for Message
            Decoders.addDecoder(clazz: Message.self)  { (source: Any) -> Message in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = Message()
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [MessageAction]
            Decoders.addDecoder(clazz: [MessageAction].self)  { (source: Any) -> [MessageAction] in
                return Decoders.decode(clazz: [MessageAction].self, source: source)
            }
            // Decoder for MessageAction
            Decoders.addDecoder(clazz: MessageAction.self)  { (source: Any) -> MessageAction in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = MessageAction()
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"])
                instance.ddid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ddid"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [MessageID]
            Decoders.addDecoder(clazz: [MessageID].self)  { (source: Any) -> [MessageID] in
                return Decoders.decode(clazz: [MessageID].self, source: source)
            }
            // Decoder for MessageID
            Decoders.addDecoder(clazz: MessageID.self)  { (source: Any) -> MessageID in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = MessageID()
                instance.mid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mid"])
                return instance
            }


            // Decoder for [MessageIDEnvelope]
            Decoders.addDecoder(clazz: [MessageIDEnvelope].self)  { (source: Any) -> [MessageIDEnvelope] in
                return Decoders.decode(clazz: [MessageIDEnvelope].self, source: source)
            }
            // Decoder for MessageIDEnvelope
            Decoders.addDecoder(clazz: MessageIDEnvelope.self)  { (source: Any) -> MessageIDEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = MessageIDEnvelope()
                instance.data = Decoders.decodeOptional(clazz: MessageID.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [MessageIn]
            Decoders.addDecoder(clazz: [MessageIn].self)  { (source: Any) -> [MessageIn] in
                return Decoders.decode(clazz: [MessageIn].self, source: source)
            }
            // Decoder for MessageIn
            Decoders.addDecoder(clazz: MessageIn.self)  { (source: Any) -> MessageIn in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = MessageIn()
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"])
                instance.cid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cid"])
                instance.ddid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ddid"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [MessageOut]
            Decoders.addDecoder(clazz: [MessageOut].self)  { (source: Any) -> [MessageOut] in
                return Decoders.decode(clazz: [MessageOut].self, source: source)
            }
            // Decoder for MessageOut
            Decoders.addDecoder(clazz: MessageOut.self)  { (source: Any) -> MessageOut in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = MessageOut()
                instance.mid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mid"])
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                instance.sdtid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdtid"])
                instance.cts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["cts"])
                instance.mv = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["mv"])
                return instance
            }


            // Decoder for [MetadataEnvelope]
            Decoders.addDecoder(clazz: [MetadataEnvelope].self)  { (source: Any) -> [MetadataEnvelope] in
                return Decoders.decode(clazz: [MetadataEnvelope].self, source: source)
            }
            // Decoder for MetadataEnvelope
            Decoders.addDecoder(clazz: MetadataEnvelope.self)  { (source: Any) -> MetadataEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = MetadataEnvelope()
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [MetadataPropertiesEnvelope]
            Decoders.addDecoder(clazz: [MetadataPropertiesEnvelope].self)  { (source: Any) -> [MetadataPropertiesEnvelope] in
                return Decoders.decode(clazz: [MetadataPropertiesEnvelope].self, source: source)
            }
            // Decoder for MetadataPropertiesEnvelope
            Decoders.addDecoder(clazz: MetadataPropertiesEnvelope.self)  { (source: Any) -> MetadataPropertiesEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = MetadataPropertiesEnvelope()
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [MetadataQueryEnvelope]
            Decoders.addDecoder(clazz: [MetadataQueryEnvelope].self)  { (source: Any) -> [MetadataQueryEnvelope] in
                return Decoders.decode(clazz: [MetadataQueryEnvelope].self, source: source)
            }
            // Decoder for MetadataQueryEnvelope
            Decoders.addDecoder(clazz: MetadataQueryEnvelope.self)  { (source: Any) -> MetadataQueryEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = MetadataQueryEnvelope()
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                return instance
            }


            // Decoder for [NonEmptyString]
            Decoders.addDecoder(clazz: [NonEmptyString].self)  { (source: Any) -> [NonEmptyString] in
                return Decoders.decode(clazz: [NonEmptyString].self, source: source)
            }
            // Decoder for NonEmptyString
            Decoders.addDecoder(clazz: NonEmptyString.self)  { (source: Any) -> NonEmptyString in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = NonEmptyString()
                instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"])
                return instance
            }


            // Decoder for [NormalizedAction]
            Decoders.addDecoder(clazz: [NormalizedAction].self)  { (source: Any) -> [NormalizedAction] in
                return Decoders.decode(clazz: [NormalizedAction].self, source: source)
            }
            // Decoder for NormalizedAction
            Decoders.addDecoder(clazz: NormalizedAction.self)  { (source: Any) -> NormalizedAction in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = NormalizedAction()
                instance.cts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["cts"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                instance.mid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mid"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.ddid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ddid"])
                instance.ddtid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ddtid"])
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                instance.mv = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["mv"])
                instance.data = Decoders.decodeOptional(clazz: ActionArray.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [NormalizedActionsEnvelope]
            Decoders.addDecoder(clazz: [NormalizedActionsEnvelope].self)  { (source: Any) -> [NormalizedActionsEnvelope] in
                return Decoders.decode(clazz: [NormalizedActionsEnvelope].self, source: source)
            }
            // Decoder for NormalizedActionsEnvelope
            Decoders.addDecoder(clazz: NormalizedActionsEnvelope.self)  { (source: Any) -> NormalizedActionsEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = NormalizedActionsEnvelope()
                instance.ddids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ddids"])
                instance.ddid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ddid"])
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["startDate"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["endDate"])
                instance.order = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order"])
                instance.next = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next"])
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["size"])
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [NormalizedMessage]
            Decoders.addDecoder(clazz: [NormalizedMessage].self)  { (source: Any) -> [NormalizedMessage] in
                return Decoders.decode(clazz: [NormalizedMessage].self, source: source)
            }
            // Decoder for NormalizedMessage
            Decoders.addDecoder(clazz: NormalizedMessage.self)  { (source: Any) -> NormalizedMessage in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = NormalizedMessage()
                instance.cts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["cts"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                instance.mid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mid"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.sdtid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdtid"])
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                instance.mv = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["mv"])
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [NormalizedMessagesEnvelope]
            Decoders.addDecoder(clazz: [NormalizedMessagesEnvelope].self)  { (source: Any) -> [NormalizedMessagesEnvelope] in
                return Decoders.decode(clazz: [NormalizedMessagesEnvelope].self, source: source)
            }
            // Decoder for NormalizedMessagesEnvelope
            Decoders.addDecoder(clazz: NormalizedMessagesEnvelope.self)  { (source: Any) -> NormalizedMessagesEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = NormalizedMessagesEnvelope()
                instance.sdids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdids"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["startDate"])
                instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["endDate"])
                instance.order = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order"])
                instance.next = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next"])
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["size"])
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [OutputRule]
            Decoders.addDecoder(clazz: [OutputRule].self)  { (source: Any) -> [OutputRule] in
                return Decoders.decode(clazz: [OutputRule].self, source: source)
            }
            // Decoder for OutputRule
            Decoders.addDecoder(clazz: OutputRule.self)  { (source: Any) -> OutputRule in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = OutputRule()
                instance.aid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aid"])
                instance.createdOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["createdOn"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.error = Decoders.decodeOptional(clazz: RuleError.self, source: sourceDictionary["error"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.index = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["index"])
                instance.invalidatedOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["invalidatedOn"])
                instance.languageVersion = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["languageVersion"])
                instance.modifiedOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["modifiedOn"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.rule = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["rule"])
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                instance.warning = Decoders.decodeOptional(clazz: RuleWarningOutput.self, source: sourceDictionary["warning"])
                return instance
            }


            // Decoder for [PresenceEnvelope]
            Decoders.addDecoder(clazz: [PresenceEnvelope].self)  { (source: Any) -> [PresenceEnvelope] in
                return Decoders.decode(clazz: [PresenceEnvelope].self, source: source)
            }
            // Decoder for PresenceEnvelope
            Decoders.addDecoder(clazz: PresenceEnvelope.self)  { (source: Any) -> PresenceEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = PresenceEnvelope()
                instance.data = Decoders.decodeOptional(clazz: PresenceModel.self, source: sourceDictionary["data"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                return instance
            }


            // Decoder for [PresenceModel]
            Decoders.addDecoder(clazz: [PresenceModel].self)  { (source: Any) -> [PresenceModel] in
                return Decoders.decode(clazz: [PresenceModel].self, source: source)
            }
            // Decoder for PresenceModel
            Decoders.addDecoder(clazz: PresenceModel.self)  { (source: Any) -> PresenceModel in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = PresenceModel()
                instance.connected = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["connected"])
                instance.lastSeenOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["lastSeenOn"])
                return instance
            }


            // Decoder for [PropertiesEnvelope]
            Decoders.addDecoder(clazz: [PropertiesEnvelope].self)  { (source: Any) -> [PropertiesEnvelope] in
                return Decoders.decode(clazz: [PropertiesEnvelope].self, source: source)
            }
            // Decoder for PropertiesEnvelope
            Decoders.addDecoder(clazz: PropertiesEnvelope.self)  { (source: Any) -> PropertiesEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = PropertiesEnvelope()
                instance.data = Decoders.decodeOptional(clazz: AppProperties.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [RefreshTokenResponse]
            Decoders.addDecoder(clazz: [RefreshTokenResponse].self)  { (source: Any) -> [RefreshTokenResponse] in
                return Decoders.decode(clazz: [RefreshTokenResponse].self, source: source)
            }
            // Decoder for RefreshTokenResponse
            Decoders.addDecoder(clazz: RefreshTokenResponse.self)  { (source: Any) -> RefreshTokenResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = RefreshTokenResponse()
                instance.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["access_token"])
                instance.expiresIn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["expires_in"])
                instance.refreshToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refresh_token"])
                instance.tokenType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token_type"])
                return instance
            }


            // Decoder for [RegisterMessage]
            Decoders.addDecoder(clazz: [RegisterMessage].self)  { (source: Any) -> [RegisterMessage] in
                return Decoders.decode(clazz: [RegisterMessage].self, source: source)
            }
            // Decoder for RegisterMessage
            Decoders.addDecoder(clazz: RegisterMessage.self)  { (source: Any) -> RegisterMessage in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = RegisterMessage()
                instance.cid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cid"])
                instance.authorization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorization"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [RuleArray]
            Decoders.addDecoder(clazz: [RuleArray].self)  { (source: Any) -> [RuleArray] in
                return Decoders.decode(clazz: [RuleArray].self, source: source)
            }
            // Decoder for RuleArray
            Decoders.addDecoder(clazz: RuleArray.self)  { (source: Any) -> RuleArray in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = RuleArray()
                instance.rules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["rules"])
                return instance
            }


            // Decoder for [RuleCreationInfo]
            Decoders.addDecoder(clazz: [RuleCreationInfo].self)  { (source: Any) -> [RuleCreationInfo] in
                return Decoders.decode(clazz: [RuleCreationInfo].self, source: source)
            }
            // Decoder for RuleCreationInfo
            Decoders.addDecoder(clazz: RuleCreationInfo.self)  { (source: Any) -> RuleCreationInfo in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = RuleCreationInfo()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.rule = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["rule"])
                return instance
            }


            // Decoder for [RuleEnvelope]
            Decoders.addDecoder(clazz: [RuleEnvelope].self)  { (source: Any) -> [RuleEnvelope] in
                return Decoders.decode(clazz: [RuleEnvelope].self, source: source)
            }
            // Decoder for RuleEnvelope
            Decoders.addDecoder(clazz: RuleEnvelope.self)  { (source: Any) -> RuleEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = RuleEnvelope()
                instance.data = Decoders.decodeOptional(clazz: OutputRule.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [RuleError]
            Decoders.addDecoder(clazz: [RuleError].self)  { (source: Any) -> [RuleError] in
                return Decoders.decode(clazz: [RuleError].self, source: source)
            }
            // Decoder for RuleError
            Decoders.addDecoder(clazz: RuleError.self)  { (source: Any) -> RuleError in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = RuleError()
                instance.errorCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["errorCode"])
                instance.fieldPath = Decoders.decodeOptional(clazz: FieldPath.self, source: sourceDictionary["fieldPath"])
                instance.messageArgs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["messageArgs"])
                instance.messageKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["messageKey"])
                return instance
            }


            // Decoder for [RuleUpdateInfo]
            Decoders.addDecoder(clazz: [RuleUpdateInfo].self)  { (source: Any) -> [RuleUpdateInfo] in
                return Decoders.decode(clazz: [RuleUpdateInfo].self, source: source)
            }
            // Decoder for RuleUpdateInfo
            Decoders.addDecoder(clazz: RuleUpdateInfo.self)  { (source: Any) -> RuleUpdateInfo in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = RuleUpdateInfo()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.rule = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["rule"])
                return instance
            }


            // Decoder for [RuleWarningOutput]
            Decoders.addDecoder(clazz: [RuleWarningOutput].self)  { (source: Any) -> [RuleWarningOutput] in
                return Decoders.decode(clazz: [RuleWarningOutput].self, source: source)
            }
            // Decoder for RuleWarningOutput
            Decoders.addDecoder(clazz: RuleWarningOutput.self)  { (source: Any) -> RuleWarningOutput in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = RuleWarningOutput()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [RulesEnvelope]
            Decoders.addDecoder(clazz: [RulesEnvelope].self)  { (source: Any) -> [RulesEnvelope] in
                return Decoders.decode(clazz: [RulesEnvelope].self, source: source)
            }
            // Decoder for RulesEnvelope
            Decoders.addDecoder(clazz: RulesEnvelope.self)  { (source: Any) -> RulesEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = RulesEnvelope()
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                return instance
            }


            // Decoder for [SnapshotResponse]
            Decoders.addDecoder(clazz: [SnapshotResponse].self)  { (source: Any) -> [SnapshotResponse] in
                return Decoders.decode(clazz: [SnapshotResponse].self, source: source)
            }
            // Decoder for SnapshotResponse
            Decoders.addDecoder(clazz: SnapshotResponse.self)  { (source: Any) -> SnapshotResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = SnapshotResponse()
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                return instance
            }


            // Decoder for [SnapshotResponses]
            Decoders.addDecoder(clazz: [SnapshotResponses].self)  { (source: Any) -> [SnapshotResponses] in
                return Decoders.decode(clazz: [SnapshotResponses].self, source: source)
            }
            // Decoder for SnapshotResponses
            Decoders.addDecoder(clazz: SnapshotResponses.self)  { (source: Any) -> SnapshotResponses in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = SnapshotResponses()
                instance.sdids = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdids"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [SnapshotsResponseEnvelope]
            Decoders.addDecoder(clazz: [SnapshotsResponseEnvelope].self)  { (source: Any) -> [SnapshotsResponseEnvelope] in
                return Decoders.decode(clazz: [SnapshotsResponseEnvelope].self, source: source)
            }
            // Decoder for SnapshotsResponseEnvelope
            Decoders.addDecoder(clazz: SnapshotsResponseEnvelope.self)  { (source: Any) -> SnapshotsResponseEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = SnapshotsResponseEnvelope()
                instance.data = Decoders.decodeOptional(clazz: SnapshotResponses.self, source: sourceDictionary["data"])
                instance.sdid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sdid"])
                return instance
            }


            // Decoder for [Tag]
            Decoders.addDecoder(clazz: [Tag].self)  { (source: Any) -> [Tag] in
                return Decoders.decode(clazz: [Tag].self, source: source)
            }
            // Decoder for Tag
            Decoders.addDecoder(clazz: Tag.self)  { (source: Any) -> Tag in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = Tag()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.isCategory = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isCategory"])
                return instance
            }


            // Decoder for [TagArray]
            Decoders.addDecoder(clazz: [TagArray].self)  { (source: Any) -> [TagArray] in
                return Decoders.decode(clazz: [TagArray].self, source: source)
            }
            // Decoder for TagArray
            Decoders.addDecoder(clazz: TagArray.self)  { (source: Any) -> TagArray in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TagArray()
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                return instance
            }


            // Decoder for [TagsEnvelope]
            Decoders.addDecoder(clazz: [TagsEnvelope].self)  { (source: Any) -> [TagsEnvelope] in
                return Decoders.decode(clazz: [TagsEnvelope].self, source: source)
            }
            // Decoder for TagsEnvelope
            Decoders.addDecoder(clazz: TagsEnvelope.self)  { (source: Any) -> TagsEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TagsEnvelope()
                instance.data = Decoders.decodeOptional(clazz: TagArray.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [Task]
            Decoders.addDecoder(clazz: [Task].self)  { (source: Any) -> [Task] in
                return Decoders.decode(clazz: [Task].self, source: source)
            }
            // Decoder for Task
            Decoders.addDecoder(clazz: Task.self)  { (source: Any) -> Task in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = Task()
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.taskType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["taskType"])
                instance.modifiedOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["modifiedOn"])
                instance.dtid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dtid"])
                instance.statusCounts = Decoders.decodeOptional(clazz: TaskStatusCounts.self, source: sourceDictionary["statusCounts"])
                instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.dids = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dids"])
                instance.taskParameters = Decoders.decodeOptional(clazz: TaskParameters.self, source: sourceDictionary["taskParameters"])
                instance.createdOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["createdOn"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [TaskByDid]
            Decoders.addDecoder(clazz: [TaskByDid].self)  { (source: Any) -> [TaskByDid] in
                return Decoders.decode(clazz: [TaskByDid].self, source: source)
            }
            // Decoder for TaskByDid
            Decoders.addDecoder(clazz: TaskByDid.self)  { (source: Any) -> TaskByDid in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskByDid()
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.taskType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["taskType"])
                instance.modifiedOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["modifiedOn"])
                instance.dtid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dtid"])
                instance.statusCounts = Decoders.decodeOptional(clazz: TaskStatusCounts.self, source: sourceDictionary["statusCounts"])
                instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"])
                instance.statuses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["statuses"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.dids = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dids"])
                instance.taskParameters = Decoders.decodeOptional(clazz: TaskParameters.self, source: sourceDictionary["taskParameters"])
                instance.createdOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["createdOn"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [TaskByDidList]
            Decoders.addDecoder(clazz: [TaskByDidList].self)  { (source: Any) -> [TaskByDidList] in
                return Decoders.decode(clazz: [TaskByDidList].self, source: source)
            }
            // Decoder for TaskByDidList
            Decoders.addDecoder(clazz: TaskByDidList.self)  { (source: Any) -> TaskByDidList in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskByDidList()
                instance.tasks = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tasks"])
                return instance
            }


            // Decoder for [TaskByDidListEnvelope]
            Decoders.addDecoder(clazz: [TaskByDidListEnvelope].self)  { (source: Any) -> [TaskByDidListEnvelope] in
                return Decoders.decode(clazz: [TaskByDidListEnvelope].self, source: source)
            }
            // Decoder for TaskByDidListEnvelope
            Decoders.addDecoder(clazz: TaskByDidListEnvelope.self)  { (source: Any) -> TaskByDidListEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskByDidListEnvelope()
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.data = Decoders.decodeOptional(clazz: TaskByDidList.self, source: sourceDictionary["data"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                return instance
            }


            // Decoder for [TaskEnvelope]
            Decoders.addDecoder(clazz: [TaskEnvelope].self)  { (source: Any) -> [TaskEnvelope] in
                return Decoders.decode(clazz: [TaskEnvelope].self, source: source)
            }
            // Decoder for TaskEnvelope
            Decoders.addDecoder(clazz: TaskEnvelope.self)  { (source: Any) -> TaskEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskEnvelope()
                instance.data = Decoders.decodeOptional(clazz: Task.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [TaskHistory]
            Decoders.addDecoder(clazz: [TaskHistory].self)  { (source: Any) -> [TaskHistory] in
                return Decoders.decode(clazz: [TaskHistory].self, source: source)
            }
            // Decoder for TaskHistory
            Decoders.addDecoder(clazz: TaskHistory.self)  { (source: Any) -> TaskHistory in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskHistory()
                instance.numAttempts = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numAttempts"])
                instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorMessage"])
                instance.errorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorCode"])
                instance.did = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["did"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                return instance
            }


            // Decoder for [TaskHistoryList]
            Decoders.addDecoder(clazz: [TaskHistoryList].self)  { (source: Any) -> [TaskHistoryList] in
                return Decoders.decode(clazz: [TaskHistoryList].self, source: source)
            }
            // Decoder for TaskHistoryList
            Decoders.addDecoder(clazz: TaskHistoryList.self)  { (source: Any) -> TaskHistoryList in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskHistoryList()
                instance.history = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["history"])
                return instance
            }


            // Decoder for [TaskList]
            Decoders.addDecoder(clazz: [TaskList].self)  { (source: Any) -> [TaskList] in
                return Decoders.decode(clazz: [TaskList].self, source: source)
            }
            // Decoder for TaskList
            Decoders.addDecoder(clazz: TaskList.self)  { (source: Any) -> TaskList in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskList()
                instance.tasks = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tasks"])
                return instance
            }


            // Decoder for [TaskListEnvelope]
            Decoders.addDecoder(clazz: [TaskListEnvelope].self)  { (source: Any) -> [TaskListEnvelope] in
                return Decoders.decode(clazz: [TaskListEnvelope].self, source: source)
            }
            // Decoder for TaskListEnvelope
            Decoders.addDecoder(clazz: TaskListEnvelope.self)  { (source: Any) -> TaskListEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskListEnvelope()
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.data = Decoders.decodeOptional(clazz: TaskList.self, source: sourceDictionary["data"])
                instance.statusCounts = Decoders.decodeOptional(clazz: TasksStatusCounts.self, source: sourceDictionary["statusCounts"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                return instance
            }


            // Decoder for [TaskParameters]
            Decoders.addDecoder(clazz: [TaskParameters].self)  { (source: Any) -> [TaskParameters] in
                return Decoders.decode(clazz: [TaskParameters].self, source: source)
            }
            // Decoder for TaskParameters
            Decoders.addDecoder(clazz: TaskParameters.self)  { (source: Any) -> TaskParameters in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskParameters()
                instance.expiresAfter = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expiresAfter"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [TaskRequest]
            Decoders.addDecoder(clazz: [TaskRequest].self)  { (source: Any) -> [TaskRequest] in
                return Decoders.decode(clazz: [TaskRequest].self, source: source)
            }
            // Decoder for TaskRequest
            Decoders.addDecoder(clazz: TaskRequest.self)  { (source: Any) -> TaskRequest in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskRequest()
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.taskType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["taskType"])
                instance.dtid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dtid"])
                instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"])
                instance.dids = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dids"])
                instance.taskParameters = Decoders.decodeOptional(clazz: TaskParameters.self, source: sourceDictionary["taskParameters"])
                return instance
            }


            // Decoder for [TaskStatus]
            Decoders.addDecoder(clazz: [TaskStatus].self)  { (source: Any) -> [TaskStatus] in
                return Decoders.decode(clazz: [TaskStatus].self, source: source)
            }
            // Decoder for TaskStatus
            Decoders.addDecoder(clazz: TaskStatus.self)  { (source: Any) -> TaskStatus in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskStatus()
                instance.numAttempts = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numAttempts"])
                instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorMessage"])
                instance.errorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorCode"])
                instance.did = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["did"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.ts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ts"])
                return instance
            }


            // Decoder for [TaskStatusCounts]
            Decoders.addDecoder(clazz: [TaskStatusCounts].self)  { (source: Any) -> [TaskStatusCounts] in
                return Decoders.decode(clazz: [TaskStatusCounts].self, source: source)
            }
            // Decoder for TaskStatusCounts
            Decoders.addDecoder(clazz: TaskStatusCounts.self)  { (source: Any) -> TaskStatusCounts in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskStatusCounts()
                instance.numFailed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numFailed"])
                instance.numCancelled = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numCancelled"])
                instance.totalDevices = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalDevices"])
                instance.numCompleted = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numCompleted"])
                instance.numSucceeded = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numSucceeded"])
                return instance
            }


            // Decoder for [TaskStatuses]
            Decoders.addDecoder(clazz: [TaskStatuses].self)  { (source: Any) -> [TaskStatuses] in
                return Decoders.decode(clazz: [TaskStatuses].self, source: source)
            }
            // Decoder for TaskStatuses
            Decoders.addDecoder(clazz: TaskStatuses.self)  { (source: Any) -> TaskStatuses in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskStatuses()
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.taskType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["taskType"])
                instance.modifiedOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["modifiedOn"])
                instance.dtid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dtid"])
                instance.statusCounts = Decoders.decodeOptional(clazz: TaskStatusCounts.self, source: sourceDictionary["statusCounts"])
                instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"])
                instance.statuses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["statuses"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.dids = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dids"])
                instance.taskParameters = Decoders.decodeOptional(clazz: TaskParameters.self, source: sourceDictionary["taskParameters"])
                instance.createdOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["createdOn"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [TaskStatusesEnvelope]
            Decoders.addDecoder(clazz: [TaskStatusesEnvelope].self)  { (source: Any) -> [TaskStatusesEnvelope] in
                return Decoders.decode(clazz: [TaskStatusesEnvelope].self, source: source)
            }
            // Decoder for TaskStatusesEnvelope
            Decoders.addDecoder(clazz: TaskStatusesEnvelope.self)  { (source: Any) -> TaskStatusesEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskStatusesEnvelope()
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.data = Decoders.decodeOptional(clazz: TaskStatuses.self, source: sourceDictionary["data"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                return instance
            }


            // Decoder for [TaskStatusesHistoryEnvelope]
            Decoders.addDecoder(clazz: [TaskStatusesHistoryEnvelope].self)  { (source: Any) -> [TaskStatusesHistoryEnvelope] in
                return Decoders.decode(clazz: [TaskStatusesHistoryEnvelope].self, source: source)
            }
            // Decoder for TaskStatusesHistoryEnvelope
            Decoders.addDecoder(clazz: TaskStatusesHistoryEnvelope.self)  { (source: Any) -> TaskStatusesHistoryEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskStatusesHistoryEnvelope()
                instance.data = Decoders.decodeOptional(clazz: TaskHistoryList.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [TaskUpdateRequest]
            Decoders.addDecoder(clazz: [TaskUpdateRequest].self)  { (source: Any) -> [TaskUpdateRequest] in
                return Decoders.decode(clazz: [TaskUpdateRequest].self, source: source)
            }
            // Decoder for TaskUpdateRequest
            Decoders.addDecoder(clazz: TaskUpdateRequest.self)  { (source: Any) -> TaskUpdateRequest in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskUpdateRequest()
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [TaskUpdateResponse]
            Decoders.addDecoder(clazz: [TaskUpdateResponse].self)  { (source: Any) -> [TaskUpdateResponse] in
                return Decoders.decode(clazz: [TaskUpdateResponse].self, source: source)
            }
            // Decoder for TaskUpdateResponse
            Decoders.addDecoder(clazz: TaskUpdateResponse.self)  { (source: Any) -> TaskUpdateResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TaskUpdateResponse()
                instance.data = Decoders.decodeOptional(clazz: Task.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [TasksStatusCounts]
            Decoders.addDecoder(clazz: [TasksStatusCounts].self)  { (source: Any) -> [TasksStatusCounts] in
                return Decoders.decode(clazz: [TasksStatusCounts].self, source: source)
            }
            // Decoder for TasksStatusCounts
            Decoders.addDecoder(clazz: TasksStatusCounts.self)  { (source: Any) -> TasksStatusCounts in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TasksStatusCounts()
                instance.CANCELLED = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["CANCELLED"])
                instance.COMPLETE = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["COMPLETE"])
                instance.PROCESSING = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["PROCESSING"])
                instance.REQUESTED = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["REQUESTED"])
                return instance
            }


            // Decoder for [Token]
            Decoders.addDecoder(clazz: [Token].self)  { (source: Any) -> [Token] in
                return Decoders.decode(clazz: [Token].self, source: source)
            }
            // Decoder for Token
            Decoders.addDecoder(clazz: Token.self)  { (source: Any) -> Token in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = Token()
                instance.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["access_token"])
                instance.expiresIn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["expires_in"])
                instance.scope = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scope"])
                instance.tokenType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token_type"])
                return instance
            }


            // Decoder for [TokenInfo]
            Decoders.addDecoder(clazz: [TokenInfo].self)  { (source: Any) -> [TokenInfo] in
                return Decoders.decode(clazz: [TokenInfo].self, source: source)
            }
            // Decoder for TokenInfo
            Decoders.addDecoder(clazz: TokenInfo.self)  { (source: Any) -> TokenInfo in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TokenInfo()
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_id"])
                instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["device_id"])
                instance.expiresIn = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expires_in"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user_id"])
                return instance
            }


            // Decoder for [TokenInfoSuccessResponse]
            Decoders.addDecoder(clazz: [TokenInfoSuccessResponse].self)  { (source: Any) -> [TokenInfoSuccessResponse] in
                return Decoders.decode(clazz: [TokenInfoSuccessResponse].self, source: source)
            }
            // Decoder for TokenInfoSuccessResponse
            Decoders.addDecoder(clazz: TokenInfoSuccessResponse.self)  { (source: Any) -> TokenInfoSuccessResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TokenInfoSuccessResponse()
                instance.data = Decoders.decodeOptional(clazz: TokenInfo.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [TokenRequest]
            Decoders.addDecoder(clazz: [TokenRequest].self)  { (source: Any) -> [TokenRequest] in
                return Decoders.decode(clazz: [TokenRequest].self, source: source)
            }
            // Decoder for TokenRequest
            Decoders.addDecoder(clazz: TokenRequest.self)  { (source: Any) -> TokenRequest in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TokenRequest()
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                return instance
            }


            // Decoder for [TokenResponse]
            Decoders.addDecoder(clazz: [TokenResponse].self)  { (source: Any) -> [TokenResponse] in
                return Decoders.decode(clazz: [TokenResponse].self, source: source)
            }
            // Decoder for TokenResponse
            Decoders.addDecoder(clazz: TokenResponse.self)  { (source: Any) -> TokenResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = TokenResponse()
                instance.data = Decoders.decodeOptional(clazz: Token.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [UnregisterDeviceResponse]
            Decoders.addDecoder(clazz: [UnregisterDeviceResponse].self)  { (source: Any) -> [UnregisterDeviceResponse] in
                return Decoders.decode(clazz: [UnregisterDeviceResponse].self, source: source)
            }
            // Decoder for UnregisterDeviceResponse
            Decoders.addDecoder(clazz: UnregisterDeviceResponse.self)  { (source: Any) -> UnregisterDeviceResponse in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = UnregisterDeviceResponse()
                instance.certificateInfo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificateInfo"])
                instance.certificateSignature = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificateSignature"])
                instance.createdOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["createdOn"])
                instance.dtid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dtid"])
                instance.eid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eid"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.manifestVersion = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["manifestVersion"])
                instance.manifestVersionPolicy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["manifestVersionPolicy"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.needProviderAuth = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["needProviderAuth"])
                instance.uid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uid"])
                return instance
            }


            // Decoder for [UnregisterDeviceResponseEnvelope]
            Decoders.addDecoder(clazz: [UnregisterDeviceResponseEnvelope].self)  { (source: Any) -> [UnregisterDeviceResponseEnvelope] in
                return Decoders.decode(clazz: [UnregisterDeviceResponseEnvelope].self, source: source)
            }
            // Decoder for UnregisterDeviceResponseEnvelope
            Decoders.addDecoder(clazz: UnregisterDeviceResponseEnvelope.self)  { (source: Any) -> UnregisterDeviceResponseEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = UnregisterDeviceResponseEnvelope()
                instance.data = Decoders.decodeOptional(clazz: UnregisterDeviceResponse.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [User]
            Decoders.addDecoder(clazz: [User].self) { (source: Any) -> [User] in
                return Decoders.decode(clazz: [User].self, source: source)
            }
            // Decoder for User
            Decoders.addDecoder(clazz: User.self)  { (source: Any) -> User in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = User()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.saIdentity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["saIdentity"])
                instance.createdOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["createdOn"])
                instance.modifiedOn = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["modifiedOn"])
                return instance
            }


            // Decoder for [UserEnvelope]
            Decoders.addDecoder(clazz: [UserEnvelope].self) { (source: Any) -> [UserEnvelope] in
                return Decoders.decode(clazz: [UserEnvelope].self, source: source)
            }
            // Decoder for UserEnvelope
            Decoders.addDecoder(clazz: UserEnvelope.self)  { (source: Any) -> UserEnvelope in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = UserEnvelope()
                instance.data = Decoders.decodeOptional(clazz: User.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [WebSocketError]
            Decoders.addDecoder(clazz: [WebSocketError].self) { (source: Any) -> [WebSocketError] in
                return Decoders.decode(clazz: [WebSocketError].self, source: source)
            }
            // Decoder for WebSocketError
            Decoders.addDecoder(clazz: WebSocketError.self)  { (source: Any) -> WebSocketError in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = WebSocketError()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.cid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cid"])
                return instance
            }
        }()
    
    static fileprivate var decoders = Dictionary<String, ((Any) -> Any)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((Any) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! Any }
    }

    static func decode<T>(clazz: [T].Type, source: Any) -> [T] {
        let array = source as! [Any]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: Any) -> [Key:T] {
        let sourceDictionary = source as! [Key: Any]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: Any) -> T {
        initialize()
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String, options: NSData.Base64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: Any?) -> T? {
        if source == nil || source is NSNull {
            return nil
        }
        return source.map { (source: Any) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: Any?) -> [T]? {
        if source == nil || source is NSNull {
            return nil
        }
        return source.map { (someSource: Any) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: Any?) -> [Key:T]? {
        if source == nil || source is NSNull {
            return nil
        }
        return source.map { (someSource: Any) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
