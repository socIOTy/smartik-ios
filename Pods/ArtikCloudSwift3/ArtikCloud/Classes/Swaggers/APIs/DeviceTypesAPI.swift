//
// DeviceTypesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



open class DeviceTypesAPI: APIBase {
    /**
     Get Available Manifest Versions
     
     - parameter deviceTypeId: (path) deviceTypeId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAvailableManifestVersions(deviceTypeId: String, completion: @escaping ((_ data: ManifestVersionsEnvelope?, _ error: Error?) -> Void)) {
        getAvailableManifestVersionsWithRequestBuilder(deviceTypeId: deviceTypeId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get Available Manifest Versions
     
     - parameter deviceTypeId: (path) deviceTypeId 
     - returns: Promise<ManifestVersionsEnvelope>
     */
    open class func getAvailableManifestVersions(deviceTypeId: String) -> Promise<ManifestVersionsEnvelope> {
        let deferred = Promise<ManifestVersionsEnvelope>.pending()
        getAvailableManifestVersions(deviceTypeId: deviceTypeId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get Available Manifest Versions
     - GET /devicetypes/{deviceTypeId}/availablemanifestversions
     - Get a Device Type's available manifest versions
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "versions" : [ "aeiou" ]
  }
}}]
     
     - parameter deviceTypeId: (path) deviceTypeId 

     - returns: RequestBuilder<ManifestVersionsEnvelope> 
     */
    open class func getAvailableManifestVersionsWithRequestBuilder(deviceTypeId: String) -> RequestBuilder<ManifestVersionsEnvelope> {
        var path = "/devicetypes/{deviceTypeId}/availablemanifestversions"
        path = path.replacingOccurrences(of: "{deviceTypeId}", with: "\(deviceTypeId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let requestBuilder: RequestBuilder<ManifestVersionsEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Get Device Type
     
     - parameter deviceTypeId: (path) deviceTypeId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDeviceType(deviceTypeId: String, completion: @escaping ((_ data: DeviceTypeEnvelope?, _ error: Error?) -> Void)) {
        getDeviceTypeWithRequestBuilder(deviceTypeId: deviceTypeId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get Device Type
     
     - parameter deviceTypeId: (path) deviceTypeId 
     - returns: Promise<DeviceTypeEnvelope>
     */
    open class func getDeviceType(deviceTypeId: String) -> Promise<DeviceTypeEnvelope> {
        let deferred = Promise<DeviceTypeEnvelope>.pending()
        getDeviceType(deviceTypeId: deviceTypeId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get Device Type
     - GET /devicetypes/{deviceTypeId}
     - Retrieves a Device Type
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "hasCloudConnector" : true,
    "issuerDn" : "aeiou",
    "description" : "aeiou",
    "oid" : "aeiou",
    "published" : true,
    "rsp" : true,
    "tags" : [ {
      "isCategory" : true,
      "name" : "aeiou"
    } ],
    "vid" : "aeiou",
    "lastUpdated" : 123456789,
    "uid" : "aeiou",
    "approved" : true,
    "uniqueName" : "aeiou",
    "protected" : true,
    "latestVersion" : 123,
    "inStore" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "ownedByCurrentUser" : true
  }
}}]
     
     - parameter deviceTypeId: (path) deviceTypeId 

     - returns: RequestBuilder<DeviceTypeEnvelope> 
     */
    open class func getDeviceTypeWithRequestBuilder(deviceTypeId: String) -> RequestBuilder<DeviceTypeEnvelope> {
        var path = "/devicetypes/{deviceTypeId}"
        path = path.replacingOccurrences(of: "{deviceTypeId}", with: "\(deviceTypeId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let requestBuilder: RequestBuilder<DeviceTypeEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Get Device Types
     
     - parameter name: (query) Device Type name 
     - parameter offset: (query) Offset for pagination. (optional)
     - parameter count: (query) Desired count of items in the result set (optional)
     - parameter tags: (query) Elements tagged with the list of tags. (comma separated) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDeviceTypes(name: String, offset: Int32? = nil, count: Int32? = nil, tags: String? = nil, doNotQueryUniqueName: Bool = false, initializableTypesOnly: Bool = false, completion: @escaping ((_ data: DeviceTypesEnvelope?, _ error: Error?) -> Void)) {
        getDeviceTypesWithRequestBuilder(name: name, offset: offset, count: count, tags: tags, doNotQueryUniqueName: doNotQueryUniqueName, initializableTypesOnly: initializableTypesOnly).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get Device Types
     
     - parameter name: (query) Device Type name 
     - parameter offset: (query) Offset for pagination. (optional)
     - parameter count: (query) Desired count of items in the result set (optional)
     - parameter tags: (query) Elements tagged with the list of tags. (comma separated) (optional)
     - returns: Promise<DeviceTypesEnvelope>
     */
    open class func getDeviceTypes(name: String, offset: Int32? = nil, count: Int32? = nil, tags: String? = nil, doNotQueryUniqueName: Bool = false, initializableTypesOnly: Bool = false) -> Promise<DeviceTypesEnvelope> {
        let deferred = Promise<DeviceTypesEnvelope>.pending()
        getDeviceTypes(name: name, offset: offset, count: count, tags: tags, doNotQueryUniqueName: doNotQueryUniqueName, initializableTypesOnly: initializableTypesOnly) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get Device Types
     - GET /devicetypes
     - Retrieves Device Types
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "offset" : 123,
  "data" : {
    "deviceTypes" : [ {
      "hasCloudConnector" : true,
      "issuerDn" : "aeiou",
      "description" : "aeiou",
      "oid" : "aeiou",
      "published" : true,
      "rsp" : true,
      "tags" : [ {
        "isCategory" : true,
        "name" : "aeiou"
      } ],
      "vid" : "aeiou",
      "lastUpdated" : 123456789,
      "uid" : "aeiou",
      "approved" : true,
      "uniqueName" : "aeiou",
      "protected" : true,
      "latestVersion" : 123,
      "inStore" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "ownedByCurrentUser" : true
    } ]
  },
  "count" : 123
}}]
     
     - parameter name: (query) Device Type name 
     - parameter offset: (query) Offset for pagination. (optional)
     - parameter count: (query) Desired count of items in the result set (optional)
     - parameter tags: (query) Elements tagged with the list of tags. (comma separated) (optional)

     - returns: RequestBuilder<DeviceTypesEnvelope> 
     */
    open class func getDeviceTypesWithRequestBuilder(name: String, offset: Int32? = nil, count: Int32? = nil, tags: String? = nil, doNotQueryUniqueName: Bool = false, initializableTypesOnly: Bool = false) -> RequestBuilder<DeviceTypesEnvelope> {
        let path = "/devicetypes"
        let URLString = ArtikCloudAPI.basePath + path

        var nillableParameters: [String:Any?] = [
            "offset": offset?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "tags": tags
        ]
        
        if doNotQueryUniqueName {
            nillableParameters["nameSearch"] = name
        } else {
            nillableParameters["name"] = name
        }
        
        if initializableTypesOnly {
            nillableParameters["createDevice"] = true
        }
 
        let parameters = APIHelper.rejectNil(nillableParameters)
        
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        
        let requestBuilder: RequestBuilder<DeviceTypesEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get Device Types by Application
     
     - parameter appId: (path) Application ID. 
     - parameter productInfo: (query) Flag to include the associated ProductInfo if present (optional)
     - parameter count: (query) Desired count of items in the result set. (optional)
     - parameter offset: (query) Offset for pagination. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDeviceTypesByApplication(appId: String, productInfo: Bool? = nil, count: Int32? = nil, offset: Int32? = nil, completion: @escaping ((_ data: DeviceTypesEnvelope?, _ error: Error?) -> Void)) {
        getDeviceTypesByApplicationWithRequestBuilder(appId: appId, productInfo: productInfo, count: count, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get Device Types by Application
     
     - parameter appId: (path) Application ID. 
     - parameter productInfo: (query) Flag to include the associated ProductInfo if present (optional)
     - parameter count: (query) Desired count of items in the result set. (optional)
     - parameter offset: (query) Offset for pagination. (optional)
     - returns: Promise<DeviceTypesEnvelope>
     */
    open class func getDeviceTypesByApplication(appId: String, productInfo: Bool? = nil, count: Int32? = nil, offset: Int32? = nil) -> Promise<DeviceTypesEnvelope> {
        let deferred = Promise<DeviceTypesEnvelope>.pending()
        getDeviceTypesByApplication(appId: appId, productInfo: productInfo, count: count, offset: offset) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get Device Types by Application
     - GET /applications/{appId}/devicetypes
     - Get Device Types by Application
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "offset" : 123,
  "data" : {
    "deviceTypes" : [ {
      "hasCloudConnector" : true,
      "issuerDn" : "aeiou",
      "description" : "aeiou",
      "oid" : "aeiou",
      "published" : true,
      "rsp" : true,
      "tags" : [ {
        "isCategory" : true,
        "name" : "aeiou"
      } ],
      "vid" : "aeiou",
      "lastUpdated" : 123456789,
      "uid" : "aeiou",
      "approved" : true,
      "uniqueName" : "aeiou",
      "protected" : true,
      "latestVersion" : 123,
      "inStore" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "ownedByCurrentUser" : true
    } ]
  },
  "count" : 123
}}]
     
     - parameter appId: (path) Application ID. 
     - parameter productInfo: (query) Flag to include the associated ProductInfo if present (optional)
     - parameter count: (query) Desired count of items in the result set. (optional)
     - parameter offset: (query) Offset for pagination. (optional)

     - returns: RequestBuilder<DeviceTypesEnvelope> 
     */
    open class func getDeviceTypesByApplicationWithRequestBuilder(appId: String, productInfo: Bool? = nil, count: Int32? = nil, offset: Int32? = nil) -> RequestBuilder<DeviceTypesEnvelope> {
        var path = "/applications/{appId}/devicetypes"
        path = path.replacingOccurrences(of: "{appId}", with: "\(appId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "productInfo": productInfo,
            "count": count?.encodeToJSON(),
            "offset": offset?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DeviceTypesEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get Latest Manifest Properties
     
     - parameter deviceTypeId: (path) Device Type ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLatestManifestProperties(deviceTypeId: String, completion: @escaping ((_ data: ManifestPropertiesEnvelope?, _ error: Error?) -> Void)) {
        getLatestManifestPropertiesWithRequestBuilder(deviceTypeId: deviceTypeId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get Latest Manifest Properties
     
     - parameter deviceTypeId: (path) Device Type ID. 
     - returns: Promise<ManifestPropertiesEnvelope>
     */
    open class func getLatestManifestProperties(deviceTypeId: String) -> Promise<ManifestPropertiesEnvelope> {
        let deferred = Promise<ManifestPropertiesEnvelope>.pending()
        getLatestManifestProperties(deviceTypeId: deviceTypeId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get Latest Manifest Properties
     - GET /devicetypes/{deviceTypeId}/manifests/latest/properties
     - Get a Device Type's manifest properties for the latest version.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "properties" : {
      "fields" : {
        "key" : "{}"
      },
      "actions" : {
        "key" : "{}"
      }
    }
  }
}}]
     
     - parameter deviceTypeId: (path) Device Type ID. 

     - returns: RequestBuilder<ManifestPropertiesEnvelope> 
     */
    open class func getLatestManifestPropertiesWithRequestBuilder(deviceTypeId: String) -> RequestBuilder<ManifestPropertiesEnvelope> {
        var path = "/devicetypes/{deviceTypeId}/manifests/latest/properties"
        path = path.replacingOccurrences(of: "{deviceTypeId}", with: "\(deviceTypeId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
 
        let requestBuilder: RequestBuilder<ManifestPropertiesEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Get manifest properties
     
     - parameter deviceTypeId: (path) Device Type ID. 
     - parameter version: (path) Manifest Version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getManifestProperties(deviceTypeId: String, version: String, completion: @escaping ((_ data: ManifestPropertiesEnvelope?, _ error: Error?) -> Void)) {
        getManifestPropertiesWithRequestBuilder(deviceTypeId: deviceTypeId, version: version).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get manifest properties
     
     - parameter deviceTypeId: (path) Device Type ID. 
     - parameter version: (path) Manifest Version. (optional, uses latest version if nil)
     - returns: Promise<ManifestPropertiesEnvelope>
     */
    open class func getManifestProperties(deviceTypeId: String, version: String?) -> Promise<ManifestPropertiesEnvelope> {
        if let version = version {
            let deferred = Promise<ManifestPropertiesEnvelope>.pending()
            getManifestProperties(deviceTypeId: deviceTypeId, version: version) { data, error in
                if let error = error {
                    deferred.reject(error)
                } else {
                    deferred.fulfill(data!)
                }
            }
            return deferred.promise
        } else {
            return getLatestManifestProperties(deviceTypeId: deviceTypeId)
        }
    }

    /**
     Get manifest properties
     - GET /devicetypes/{deviceTypeId}/manifests/{version}/properties
     - Get a Device Type's manifest properties for a specific version.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "properties" : {
      "fields" : {
        "key" : "{}"
      },
      "actions" : {
        "key" : "{}"
      }
    }
  }
}}]
     
     - parameter deviceTypeId: (path) Device Type ID. 
     - parameter version: (path) Manifest Version. 

     - returns: RequestBuilder<ManifestPropertiesEnvelope> 
     */
    open class func getManifestPropertiesWithRequestBuilder(deviceTypeId: String, version: String) -> RequestBuilder<ManifestPropertiesEnvelope> {
        var path = "/devicetypes/{deviceTypeId}/manifests/{version}/properties"
        path = path.replacingOccurrences(of: "{deviceTypeId}", with: "\(deviceTypeId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{version}", with: "\(version)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let requestBuilder: RequestBuilder<ManifestPropertiesEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: nil, isBody: true)
    }

}
