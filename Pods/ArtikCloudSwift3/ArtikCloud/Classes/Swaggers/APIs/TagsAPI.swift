//
// TagsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



open class TagsAPI: APIBase {
    /**
     Get all categories
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagCategories(_ completion: @escaping ((_ data: TagsEnvelope?, _ error: Error?) -> Void)) {
        getTagCategoriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get all categories
     
     - returns: Promise<TagsEnvelope>
     */
    open class func getTagCategories() -> Promise<TagsEnvelope> {
        let deferred = Promise<TagsEnvelope>.pending()
        getTagCategories() { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get all categories
     - GET /tags/categories
     - Get all tags marked as categories
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "tags" : [ {
      "isCategory" : true,
      "name" : "aeiou"
    } ]
  }
}}]

     - returns: RequestBuilder<TagsEnvelope> 
     */
    open class func getTagCategoriesWithRequestBuilder() -> RequestBuilder<TagsEnvelope> {
        let path = "/tags/categories"
        let URLString = ArtikCloudAPI.basePath + path
 
        let requestBuilder: RequestBuilder<TagsEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     * enum for parameter entityType
     */
    public enum EntityType_getTagSuggestions: String { 
        case tag = "TAG"
        case application = "APPLICATION"
        case deviceType = "DEVICE_TYPE"
    }

    /**
     Get tag suggestions
     
     - parameter entityType: (query) Entity type name. (optional)
     - parameter tags: (query) Comma separated list of tags. (optional)
     - parameter name: (query) Name of tags used for type ahead. (optional)
     - parameter count: (query) Number of results to return. Max 10. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagSuggestions(entityType: EntityType_getTagSuggestions? = nil, tags: String? = nil, name: String? = nil, count: Int32? = nil, completion: @escaping ((_ data: TagsEnvelope?, _ error: Error?) -> Void)) {
        getTagSuggestionsWithRequestBuilder(entityType: entityType, tags: tags, name: name, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get tag suggestions
     
     - parameter entityType: (query) Entity type name. (optional)
     - parameter tags: (query) Comma separated list of tags. (optional)
     - parameter name: (query) Name of tags used for type ahead. (optional)
     - parameter count: (query) Number of results to return. Max 10. (optional)
     - returns: Promise<TagsEnvelope>
     */
    open class func getTagSuggestions(entityType: EntityType_getTagSuggestions? = nil, tags: String? = nil, name: String? = nil, count: Int32? = nil) -> Promise<TagsEnvelope> {
        let deferred = Promise<TagsEnvelope>.pending()
        getTagSuggestions(entityType: entityType, tags: tags, name: name, count: count) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get tag suggestions
     - GET /tags/suggestions
     - Get tag suggestions for applications, device types that have been most used with a group of tags.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "tags" : [ {
      "isCategory" : true,
      "name" : "aeiou"
    } ]
  }
}}]
     
     - parameter entityType: (query) Entity type name. (optional)
     - parameter tags: (query) Comma separated list of tags. (optional)
     - parameter name: (query) Name of tags used for type ahead. (optional)
     - parameter count: (query) Number of results to return. Max 10. (optional)

     - returns: RequestBuilder<TagsEnvelope> 
     */
    open class func getTagSuggestionsWithRequestBuilder(entityType: EntityType_getTagSuggestions? = nil, tags: String? = nil, name: String? = nil, count: Int32? = nil) -> RequestBuilder<TagsEnvelope> {
        let path = "/tags/suggestions"
        let URLString = ArtikCloudAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "entity_type": entityType?.rawValue,
            "tags": tags,
            "name": name,
            "count": count?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TagsEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get all tags of categories
     
     - parameter categories: (query) Comma separated list of categories. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagsByCategories(categories: String? = nil, completion: @escaping ((_ data: TagsEnvelope?, _ error: Error?) -> Void)) {
        getTagsByCategoriesWithRequestBuilder(categories: categories).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get all tags of categories
     
     - parameter categories: (query) Comma separated list of categories. (optional)
     - returns: Promise<TagsEnvelope>
     */
    open class func getTagsByCategories(categories: String? = nil) -> Promise<TagsEnvelope> {
        let deferred = Promise<TagsEnvelope>.pending()
        getTagsByCategories(categories: categories) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get all tags of categories
     - GET /tags
     - Get all tags related to the list of categories
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "tags" : [ {
      "isCategory" : true,
      "name" : "aeiou"
    } ]
  }
}}]
     
     - parameter categories: (query) Comma separated list of categories. (optional)

     - returns: RequestBuilder<TagsEnvelope> 
     */
    open class func getTagsByCategoriesWithRequestBuilder(categories: String? = nil) -> RequestBuilder<TagsEnvelope> {
        let path = "/tags"
        let URLString = ArtikCloudAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "categories": categories
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TagsEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
