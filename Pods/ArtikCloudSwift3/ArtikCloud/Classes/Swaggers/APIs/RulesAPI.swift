//
// RulesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



open class RulesAPI: APIBase {
    /**
     Create Rule
     
     - parameter ruleInfo: (body) Rule object that needs to be added 
     - parameter userId: (query) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createRule(ruleInfo: RuleCreationInfo, userId: String, completion: @escaping ((_ data: RuleEnvelope?, _ error: Error?) -> Void)) {
        createRuleWithRequestBuilder(ruleInfo: ruleInfo, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create Rule
     
     - parameter ruleInfo: (body) Rule object that needs to be added 
     - parameter userId: (query) User ID 
     - returns: Promise<RuleEnvelope>
     */
    open class func createRule(ruleInfo: RuleCreationInfo, userId: String) -> Promise<RuleEnvelope> {
        let deferred = Promise<RuleEnvelope>.pending()
        createRule(ruleInfo: ruleInfo, userId: userId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Create Rule
     - POST /rules
     - Create a new Rule
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "languageVersion" : 123,
    "description" : "aeiou",
    "index" : 123,
    "rule" : {
      "key" : "{}"
    },
    "error" : {
      "messageKey" : "aeiou",
      "fieldPath" : {
        "path" : [ {
          "text" : "aeiou"
        } ]
      },
      "messageArgs" : [ "aeiou" ],
      "errorCode" : 123
    },
    "createdOn" : 123456789,
    "enabled" : true,
    "uid" : "aeiou",
    "modifiedOn" : 123456789,
    "name" : "aeiou",
    "warning" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "invalidatedOn" : 123456789,
    "id" : "aeiou",
    "aid" : "aeiou"
  }
}}]
     
     - parameter ruleInfo: (body) Rule object that needs to be added 
     - parameter userId: (query) User ID 

     - returns: RequestBuilder<RuleEnvelope> 
     */
    open class func createRuleWithRequestBuilder(ruleInfo: RuleCreationInfo, userId: String) -> RequestBuilder<RuleEnvelope> {
        let path = "/rules"
        let URLString = ArtikCloudAPI.basePath + path
        
        let parameters = ruleInfo.encodeToJSON() as? [String:Any]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RuleEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete Rule
     
     - parameter ruleId: (path) Rule ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRule(ruleId: String, completion: @escaping ((_ data: RuleEnvelope?, _ error: Error?) -> Void)) {
        deleteRuleWithRequestBuilder(ruleId: ruleId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete Rule
     
     - parameter ruleId: (path) Rule ID. 
     - returns: Promise<RuleEnvelope>
     */
    open class func deleteRule(ruleId: String) -> Promise<RuleEnvelope> {
        let deferred = Promise<RuleEnvelope>.pending()
        deleteRule(ruleId: ruleId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Delete Rule
     - DELETE /rules/{ruleId}
     - Delete a Rule
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "languageVersion" : 123,
    "description" : "aeiou",
    "index" : 123,
    "rule" : {
      "key" : "{}"
    },
    "error" : {
      "messageKey" : "aeiou",
      "fieldPath" : {
        "path" : [ {
          "text" : "aeiou"
        } ]
      },
      "messageArgs" : [ "aeiou" ],
      "errorCode" : 123
    },
    "createdOn" : 123456789,
    "enabled" : true,
    "uid" : "aeiou",
    "modifiedOn" : 123456789,
    "name" : "aeiou",
    "warning" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "invalidatedOn" : 123456789,
    "id" : "aeiou",
    "aid" : "aeiou"
  }
}}]
     
     - parameter ruleId: (path) Rule ID. 

     - returns: RequestBuilder<RuleEnvelope> 
     */
    open class func deleteRuleWithRequestBuilder(ruleId: String) -> RequestBuilder<RuleEnvelope> {
        var path = "/rules/{ruleId}"
        path = path.replacingOccurrences(of: "{ruleId}", with: "\(ruleId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let requestBuilder: RequestBuilder<RuleEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Get Rule
     
     - parameter ruleId: (path) Rule ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRule(ruleId: String, completion: @escaping ((_ data: RuleEnvelope?, _ error: Error?) -> Void)) {
        getRuleWithRequestBuilder(ruleId: ruleId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get Rule
     
     - parameter ruleId: (path) Rule ID. 
     - returns: Promise<RuleEnvelope>
     */
    open class func getRule(ruleId: String) -> Promise<RuleEnvelope> {
        let deferred = Promise<RuleEnvelope>.pending()
        getRule(ruleId: ruleId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get Rule
     - GET /rules/{ruleId}
     - Get a rule using the Rule ID
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "languageVersion" : 123,
    "description" : "aeiou",
    "index" : 123,
    "rule" : {
      "key" : "{}"
    },
    "error" : {
      "messageKey" : "aeiou",
      "fieldPath" : {
        "path" : [ {
          "text" : "aeiou"
        } ]
      },
      "messageArgs" : [ "aeiou" ],
      "errorCode" : 123
    },
    "createdOn" : 123456789,
    "enabled" : true,
    "uid" : "aeiou",
    "modifiedOn" : 123456789,
    "name" : "aeiou",
    "warning" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "invalidatedOn" : 123456789,
    "id" : "aeiou",
    "aid" : "aeiou"
  }
}}]
     
     - parameter ruleId: (path) Rule ID. 

     - returns: RequestBuilder<RuleEnvelope> 
     */
    open class func getRuleWithRequestBuilder(ruleId: String) -> RequestBuilder<RuleEnvelope> {
        var path = "/rules/{ruleId}"
        path = path.replacingOccurrences(of: "{ruleId}", with: "\(ruleId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let requestBuilder: RequestBuilder<RuleEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Update Rule
     
     - parameter ruleId: (path) Rule ID. 
     - parameter ruleInfo: (body) Rule object that needs to be updated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateRule(ruleId: String, ruleInfo: RuleUpdateInfo, completion: @escaping ((_ data: RuleEnvelope?, _ error: Error?) -> Void)) {
        updateRuleWithRequestBuilder(ruleId: ruleId, ruleInfo: ruleInfo).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update Rule
     
     - parameter ruleId: (path) Rule ID. 
     - parameter ruleInfo: (body) Rule object that needs to be updated 
     - returns: Promise<RuleEnvelope>
     */
    open class func updateRule(ruleId: String, ruleInfo: RuleUpdateInfo) -> Promise<RuleEnvelope> {
        let deferred = Promise<RuleEnvelope>.pending()
        updateRule(ruleId: ruleId, ruleInfo: ruleInfo) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Update Rule
     - PUT /rules/{ruleId}
     - Update an existing Rule
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "languageVersion" : 123,
    "description" : "aeiou",
    "index" : 123,
    "rule" : {
      "key" : "{}"
    },
    "error" : {
      "messageKey" : "aeiou",
      "fieldPath" : {
        "path" : [ {
          "text" : "aeiou"
        } ]
      },
      "messageArgs" : [ "aeiou" ],
      "errorCode" : 123
    },
    "createdOn" : 123456789,
    "enabled" : true,
    "uid" : "aeiou",
    "modifiedOn" : 123456789,
    "name" : "aeiou",
    "warning" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "invalidatedOn" : 123456789,
    "id" : "aeiou",
    "aid" : "aeiou"
  }
}}]
     
     - parameter ruleId: (path) Rule ID. 
     - parameter ruleInfo: (body) Rule object that needs to be updated 

     - returns: RequestBuilder<RuleEnvelope> 
     */
    open class func updateRuleWithRequestBuilder(ruleId: String, ruleInfo: RuleUpdateInfo) -> RequestBuilder<RuleEnvelope> {
        var path = "/rules/{ruleId}"
        path = path.replacingOccurrences(of: "{ruleId}", with: "\(ruleId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
        
        let parameters = ruleInfo.encodeToJSON() as? [String:Any]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RuleEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
