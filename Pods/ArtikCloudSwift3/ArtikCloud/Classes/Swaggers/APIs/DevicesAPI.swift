//
// DevicesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



open class DevicesAPI: APIBase {
    /**
     Add Device
     
     - parameter device: (body) Device to be added to the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addDevice(device: Device, completion: @escaping ((_ data: DeviceEnvelope?, _ error: Error?) -> Void)) {
        addDeviceWithRequestBuilder(device: device).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Add Device
     
     - parameter device: (body) Device to be added to the user 
     - returns: Promise<DeviceEnvelope>
     */
    open class func addDevice(device: Device) -> Promise<DeviceEnvelope> {
        let deferred = Promise<DeviceEnvelope>.pending()
        addDevice(device: device) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Add Device
     - POST /devices
     - Create a device
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "eid" : "aeiou",
    "dtid" : "aeiou",
    "manifestVersion" : 123,
    "certificateInfo" : "aeiou",
    "createdOn" : 123456789,
    "connected" : true,
    "uid" : "aeiou",
    "manifestVersionPolicy" : "aeiou",
    "name" : "aeiou",
    "needProviderAuth" : true,
    "certificateSignature" : "aeiou",
    "id" : "aeiou",
    "providerCredentials" : {
      "key" : "{}"
    },
    "properties" : {
      "key" : "{}"
    }
  }
}}]
     
     - parameter device: (body) Device to be added to the user 

     - returns: RequestBuilder<DeviceEnvelope> 
     */
    open class func addDeviceWithRequestBuilder(device: Device) -> RequestBuilder<DeviceEnvelope> {
        let path = "/devices"
        let URLString = ArtikCloudAPI.basePath + path
        let parameters = device.encodeToJSON() as? [String:Any]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DeviceEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete Device
     
     - parameter deviceId: (path) deviceId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDevice(deviceId: String, completion: @escaping ((_ data: DeviceEnvelope?, _ error: Error?) -> Void)) {
        deleteDeviceWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete Device
     
     - parameter deviceId: (path) deviceId 
     - returns: Promise<DeviceEnvelope>
     */
    open class func deleteDevice(deviceId: String) -> Promise<DeviceEnvelope> {
        let deferred = Promise<DeviceEnvelope>.pending()
        deleteDevice(deviceId: deviceId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Delete Device
     - DELETE /devices/{deviceId}
     - Deletes a device
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "eid" : "aeiou",
    "dtid" : "aeiou",
    "manifestVersion" : 123,
    "certificateInfo" : "aeiou",
    "createdOn" : 123456789,
    "connected" : true,
    "uid" : "aeiou",
    "manifestVersionPolicy" : "aeiou",
    "name" : "aeiou",
    "needProviderAuth" : true,
    "certificateSignature" : "aeiou",
    "id" : "aeiou",
    "providerCredentials" : {
      "key" : "{}"
    },
    "properties" : {
      "key" : "{}"
    }
  }
}}]
     
     - parameter deviceId: (path) deviceId 

     - returns: RequestBuilder<DeviceEnvelope> 
     */
    open class func deleteDeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<DeviceEnvelope> {
        var path = "/devices/{deviceId}"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
 
        let requestBuilder: RequestBuilder<DeviceEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Delete Device Token
     
     - parameter deviceId: (path) deviceId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDeviceToken(deviceId: String, completion: @escaping ((_ data: DeviceTokenEnvelope?, _ error: Error?) -> Void)) {
        deleteDeviceTokenWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete Device Token
     
     - parameter deviceId: (path) deviceId 
     - returns: Promise<DeviceTokenEnvelope>
     */
    open class func deleteDeviceToken(deviceId: String) -> Promise<DeviceTokenEnvelope> {
        let deferred = Promise<DeviceTokenEnvelope>.pending()
        deleteDeviceToken(deviceId: deviceId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Delete Device Token
     - DELETE /devices/{deviceId}/tokens
     - Deletes a device's token
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "uid" : "aeiou",
    "accessToken" : "aeiou",
    "did" : "aeiou",
    "cid" : "aeiou"
  }
}}]
     
     - parameter deviceId: (path) deviceId 

     - returns: RequestBuilder<DeviceTokenEnvelope> 
     */
    open class func deleteDeviceTokenWithRequestBuilder(deviceId: String) -> RequestBuilder<DeviceTokenEnvelope> {
        var path = "/devices/{deviceId}/tokens"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
 
        let requestBuilder: RequestBuilder<DeviceTokenEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Get Device
     
     - parameter deviceId: (path) deviceId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevice(deviceId: String, completion: @escaping ((_ data: DeviceEnvelope?, _ error: Error?) -> Void)) {
        getDeviceWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get Device
     
     - parameter deviceId: (path) deviceId 
     - returns: Promise<DeviceEnvelope>
     */
    open class func getDevice(deviceId: String) -> Promise<DeviceEnvelope> {
        let deferred = Promise<DeviceEnvelope>.pending()
        getDevice(deviceId: deviceId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get Device
     - GET /devices/{deviceId}
     - Retrieves a device
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "eid" : "aeiou",
    "dtid" : "aeiou",
    "manifestVersion" : 123,
    "certificateInfo" : "aeiou",
    "createdOn" : 123456789,
    "connected" : true,
    "uid" : "aeiou",
    "manifestVersionPolicy" : "aeiou",
    "name" : "aeiou",
    "needProviderAuth" : true,
    "certificateSignature" : "aeiou",
    "id" : "aeiou",
    "providerCredentials" : {
      "key" : "{}"
    },
    "properties" : {
      "key" : "{}"
    }
  }
}}]
     
     - parameter deviceId: (path) deviceId 

     - returns: RequestBuilder<DeviceEnvelope> 
     */
    open class func getDeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<DeviceEnvelope> {
        var path = "/devices/{deviceId}"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
 
        let requestBuilder: RequestBuilder<DeviceEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Get device presence information
     
     - parameter deviceId: (path) Device ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevicePresence(deviceId: String, completion: @escaping ((_ data: PresenceEnvelope?, _ error: Error?) -> Void)) {
        getDevicePresenceWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get device presence information
     
     - parameter deviceId: (path) Device ID. 
     - returns: Promise<PresenceEnvelope>
     */
    open class func getDevicePresence(deviceId: String) -> Promise<PresenceEnvelope> {
        let deferred = Promise<PresenceEnvelope>.pending()
        getDevicePresence(deviceId: deviceId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get device presence information
     - GET /devices/{deviceId}/presence
     - Return the presence status of the given device along with the time it was last seen
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "connected" : true,
    "lastSeenOn" : 123456789
  },
  "sdid" : "aeiou"
}}]
     
     - parameter deviceId: (path) Device ID. 

     - returns: RequestBuilder<PresenceEnvelope> 
     */
    open class func getDevicePresenceWithRequestBuilder(deviceId: String) -> RequestBuilder<PresenceEnvelope> {
        var path = "/devices/{deviceId}/presence"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
 
        let requestBuilder: RequestBuilder<PresenceEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Get Device Token
     
     - parameter deviceId: (path) deviceId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDeviceToken(deviceId: String, completion: @escaping ((_ data: DeviceTokenEnvelope?, _ error: Error?) -> Void)) {
        getDeviceTokenWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get Device Token
     
     - parameter deviceId: (path) deviceId 
     - returns: Promise<DeviceTokenEnvelope>
     */
    open class func getDeviceToken(deviceId: String) -> Promise<DeviceTokenEnvelope> {
        let deferred = Promise<DeviceTokenEnvelope>.pending()
        getDeviceToken(deviceId: deviceId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get Device Token
     - GET /devices/{deviceId}/tokens
     - Retrieves a device's token
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "uid" : "aeiou",
    "accessToken" : "aeiou",
    "did" : "aeiou",
    "cid" : "aeiou"
  }
}}]
     
     - parameter deviceId: (path) deviceId 

     - returns: RequestBuilder<DeviceTokenEnvelope> 
     */
    open class func getDeviceTokenWithRequestBuilder(deviceId: String) -> RequestBuilder<DeviceTokenEnvelope> {
        var path = "/devices/{deviceId}/tokens"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
 
        let requestBuilder: RequestBuilder<DeviceTokenEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Update Device
     
     - parameter deviceId: (path) deviceId 
     - parameter device: (body) Device to be updated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDevice(deviceId: String, device: Device, completion: @escaping ((_ data: DeviceEnvelope?, _ error: Error?) -> Void)) {
        updateDeviceWithRequestBuilder(deviceId: deviceId, device: device).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update Device
     
     - parameter deviceId: (path) deviceId 
     - parameter device: (body) Device to be updated 
     - returns: Promise<DeviceEnvelope>
     */
    open class func updateDevice(deviceId: String, device: Device) -> Promise<DeviceEnvelope> {
        let deferred = Promise<DeviceEnvelope>.pending()
        updateDevice(deviceId: deviceId, device: device) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Update Device
     - PUT /devices/{deviceId}
     - Updates a device
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "eid" : "aeiou",
    "dtid" : "aeiou",
    "manifestVersion" : 123,
    "certificateInfo" : "aeiou",
    "createdOn" : 123456789,
    "connected" : true,
    "uid" : "aeiou",
    "manifestVersionPolicy" : "aeiou",
    "name" : "aeiou",
    "needProviderAuth" : true,
    "certificateSignature" : "aeiou",
    "id" : "aeiou",
    "providerCredentials" : {
      "key" : "{}"
    },
    "properties" : {
      "key" : "{}"
    }
  }
}}]
     
     - parameter deviceId: (path) deviceId 
     - parameter device: (body) Device to be updated 

     - returns: RequestBuilder<DeviceEnvelope> 
     */
    open class func updateDeviceWithRequestBuilder(deviceId: String, device: Device) -> RequestBuilder<DeviceEnvelope> {
        var path = "/devices/{deviceId}"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
        
        let parameters = device.encodeToJSON() as? [String:Any]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DeviceEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update Device Token
     
     - parameter deviceId: (path) deviceId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDeviceToken(deviceId: String, completion: @escaping ((_ data: DeviceTokenEnvelope?, _ error: Error?) -> Void)) {
        updateDeviceTokenWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update Device Token
     
     - parameter deviceId: (path) deviceId 
     - returns: Promise<DeviceTokenEnvelope>
     */
    open class func updateDeviceToken(deviceId: String) -> Promise<DeviceTokenEnvelope> {
        let deferred = Promise<DeviceTokenEnvelope>.pending()
        updateDeviceToken(deviceId: deviceId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Update Device Token
     - PUT /devices/{deviceId}/tokens
     - Updates a device's token
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "uid" : "aeiou",
    "accessToken" : "aeiou",
    "did" : "aeiou",
    "cid" : "aeiou"
  }
}}]
     
     - parameter deviceId: (path) deviceId 

     - returns: RequestBuilder<DeviceTokenEnvelope> 
     */
    open class func updateDeviceTokenWithRequestBuilder(deviceId: String) -> RequestBuilder<DeviceTokenEnvelope> {
        var path = "/devices/{deviceId}/tokens"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
 
        let requestBuilder: RequestBuilder<DeviceTokenEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: nil, isBody: true)
    }

}
