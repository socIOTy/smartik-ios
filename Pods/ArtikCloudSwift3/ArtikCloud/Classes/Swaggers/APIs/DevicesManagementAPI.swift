//
// DevicesManagementAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



open class DevicesManagementAPI: APIBase {
    /**
     Create a new task for one or more devices
     
     - parameter taskPayload: (body) Task object to be created 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTasks(taskPayload: TaskRequest, completion: @escaping ((_ data: TaskEnvelope?, _ error: Error?) -> Void)) {
        createTasksWithRequestBuilder(taskPayload: taskPayload).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a new task for one or more devices
     
     - parameter taskPayload: (body) Task object to be created 
     - returns: Promise<TaskEnvelope>
     */
    open class func createTasks(taskPayload: TaskRequest) -> Promise<TaskEnvelope> {
        let deferred = Promise<TaskEnvelope>.pending()
        createTasks(taskPayload: taskPayload) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Create a new task for one or more devices
     - POST /devicemgmt/tasks
     - Create a new task for one or more devices
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "filter" : "aeiou",
    "taskType" : "aeiou",
    "modifiedOn" : 123456789,
    "dtid" : "aeiou",
    "statusCounts" : {
      "numFailed" : 123,
      "numCancelled" : 123,
      "totalDevices" : 123,
      "numCompleted" : 123,
      "numSucceeded" : 123
    },
    "property" : "aeiou",
    "id" : "aeiou",
    "dids" : [ "aeiou" ],
    "taskParameters" : {
      "expiresAfter" : 123,
      "value" : "aeiou"
    },
    "createdOn" : 123456789,
    "status" : "aeiou"
  }
}}]
     
     - parameter taskPayload: (body) Task object to be created 

     - returns: RequestBuilder<TaskEnvelope> 
     */
    open class func createTasksWithRequestBuilder(taskPayload: TaskRequest) -> RequestBuilder<TaskEnvelope> {
        let path = "/devicemgmt/tasks"
        let URLString = ArtikCloudAPI.basePath + path
        
        let parameters = taskPayload.encodeToJSON() as? [String:Any?]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TaskEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Deletes a device's properties.
     
     - parameter did: (path) Device ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteServerProperties(did: String, completion: @escaping ((_ data: MetadataEnvelope?, _ error: Error?) -> Void)) {
        deleteServerPropertiesWithRequestBuilder(did: did).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Deletes a device's properties.
     
     - parameter did: (path) Device ID. 
     - returns: Promise<MetadataEnvelope>
     */
    open class func deleteServerProperties(did: String) -> Promise<MetadataEnvelope> {
        let deferred = Promise<MetadataEnvelope>.pending()
        deleteServerProperties(did: did) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Deletes a device's properties.
     - DELETE /devicemgmt/devices/{did}/serverproperties
     - Deletes a device's properties.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "key" : "{}"
  }
}}]
     
     - parameter did: (path) Device ID. 

     - returns: RequestBuilder<MetadataEnvelope> 
     */
    open class func deleteServerPropertiesWithRequestBuilder(did: String) -> RequestBuilder<MetadataEnvelope> {
        var path = "/devicemgmt/devices/{did}/serverproperties"
        path = path.replacingOccurrences(of: "{did}", with: "\(did)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
 
        let requestBuilder: RequestBuilder<MetadataEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Returns the list of tasks for a particular device id with optional status filter.
     
     - parameter did: (path) Device ID. 
     - parameter count: (query) Max results count. (optional)
     - parameter offset: (query) Result starting offset. (optional)
     - parameter status: (query) Status filter. Comma-separated statuses. (optional)
     - parameter order: (query) Sort results by a field. Valid fields: createdOn. (optional)
     - parameter sort: (query) Sort order. Valid values: asc or desc. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllByDid(did: String, count: Int32? = nil, offset: Int32? = nil, status: String? = nil, order: String? = nil, sort: String? = nil, completion: @escaping ((_ data: TaskByDidListEnvelope?, _ error: Error?) -> Void)) {
        getAllByDidWithRequestBuilder(did: did, count: count, offset: offset, status: status, order: order, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Returns the list of tasks for a particular device id with optional status filter.
     
     - parameter did: (path) Device ID. 
     - parameter count: (query) Max results count. (optional)
     - parameter offset: (query) Result starting offset. (optional)
     - parameter status: (query) Status filter. Comma-separated statuses. (optional)
     - parameter order: (query) Sort results by a field. Valid fields: createdOn. (optional)
     - parameter sort: (query) Sort order. Valid values: asc or desc. (optional)
     - returns: Promise<TaskByDidListEnvelope>
     */
    open class func getAllByDid(did: String, count: Int32? = nil, offset: Int32? = nil, status: String? = nil, order: String? = nil, sort: String? = nil) -> Promise<TaskByDidListEnvelope> {
        let deferred = Promise<TaskByDidListEnvelope>.pending()
        getAllByDid(did: did, count: count, offset: offset, status: status, order: order, sort: sort) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Returns the list of tasks for a particular device id with optional status filter.
     - GET /devicemgmt/devices/{did}/tasks
     - Returns the list of tasks for a particular device id with optional status filter.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "data" : {
    "tasks" : [ {
      "filter" : "aeiou",
      "taskType" : "aeiou",
      "modifiedOn" : 123456789,
      "dtid" : "aeiou",
      "statusCounts" : {
        "numFailed" : 123,
        "numCancelled" : 123,
        "totalDevices" : 123,
        "numCompleted" : 123,
        "numSucceeded" : 123
      },
      "property" : "aeiou",
      "statuses" : [ {
        "numAttempts" : 123,
        "errorMessage" : "aeiou",
        "errorCode" : "aeiou",
        "did" : "aeiou",
        "status" : "aeiou",
        "ts" : 123456789
      } ],
      "id" : "aeiou",
      "dids" : [ "aeiou" ],
      "taskParameters" : {
        "expiresAfter" : 123,
        "value" : "aeiou"
      },
      "createdOn" : 123456789,
      "status" : "aeiou"
    } ]
  },
  "offset" : 123,
  "count" : 123
}}]
     
     - parameter did: (path) Device ID. 
     - parameter count: (query) Max results count. (optional)
     - parameter offset: (query) Result starting offset. (optional)
     - parameter status: (query) Status filter. Comma-separated statuses. (optional)
     - parameter order: (query) Sort results by a field. Valid fields: createdOn. (optional)
     - parameter sort: (query) Sort order. Valid values: asc or desc. (optional)

     - returns: RequestBuilder<TaskByDidListEnvelope> 
     */
    open class func getAllByDidWithRequestBuilder(did: String, count: Int32? = nil, offset: Int32? = nil, status: String? = nil, order: String? = nil, sort: String? = nil) -> RequestBuilder<TaskByDidListEnvelope> {
        var path = "/devicemgmt/devices/{did}/tasks"
        path = path.replacingOccurrences(of: "{did}", with: "\(did)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "count": count?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "status": status,
            "order": order,
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TaskByDidListEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Read a device type device management information.
     
     - parameter dtid: (path) Device type ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDeviceTypesInfo(dtid: String, completion: @escaping ((_ data: DeviceTypesInfoEnvelope?, _ error: Error?) -> Void)) {
        getDeviceTypesInfoWithRequestBuilder(dtid: dtid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Read a device type device management information.
     
     - parameter dtid: (path) Device type ID. 
     - returns: Promise<DeviceTypesInfoEnvelope>
     */
    open class func getDeviceTypesInfo(dtid: String) -> Promise<DeviceTypesInfoEnvelope> {
        let deferred = Promise<DeviceTypesInfoEnvelope>.pending()
        getDeviceTypesInfo(dtid: dtid) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Read a device type device management information.
     - GET /devicemgmt/devicetypes/{dtid}
     - Read a device type device management information.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "devicePropertiesEnabled" : true,
    "pmax" : 123,
    "modifiedOn" : 123456789,
    "dtid" : "aeiou",
    "pmin" : 123,
    "taskExpiresAfter" : 123,
    "createdOn" : 123456789
  }
}}]
     
     - parameter dtid: (path) Device type ID. 

     - returns: RequestBuilder<DeviceTypesInfoEnvelope> 
     */
    open class func getDeviceTypesInfoWithRequestBuilder(dtid: String) -> RequestBuilder<DeviceTypesInfoEnvelope> {
        var path = "/devicemgmt/devicetypes/{dtid}"
        path = path.replacingOccurrences(of: "{dtid}", with: "\(dtid)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let requestBuilder: RequestBuilder<DeviceTypesInfoEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Get a device type's device management manifest properties
     
     - parameter dtid: (path) Device Type ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getManifestProperties(dtid: String, completion: @escaping ((_ data: MetadataPropertiesEnvelope?, _ error: Error?) -> Void)) {
        getManifestPropertiesWithRequestBuilder(dtid: dtid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get a device type's device management manifest properties
     
     - parameter dtid: (path) Device Type ID. 
     - returns: Promise<MetadataPropertiesEnvelope>
     */
    open class func getManifestProperties(dtid: String) -> Promise<MetadataPropertiesEnvelope> {
        let deferred = Promise<MetadataPropertiesEnvelope>.pending()
        getManifestProperties(dtid: dtid) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Get a device type's device management manifest properties
     - GET /devicemgmt/devicetypes/{dtid}/manifest/properties
     - Get a device type's device management manifest properties
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "key" : "{}"
  }
}}]
     
     - parameter dtid: (path) Device Type ID. 

     - returns: RequestBuilder<MetadataPropertiesEnvelope> 
     */
    open class func getManifestPropertiesWithRequestBuilder(dtid: String) -> RequestBuilder<MetadataPropertiesEnvelope> {
        var path = "/devicemgmt/devicetypes/{dtid}/manifest/properties"
        path = path.replacingOccurrences(of: "{dtid}", with: "\(dtid)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let requestBuilder: RequestBuilder<MetadataPropertiesEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Read a device's properties.
     
     - parameter did: (path) Device ID. 
     - parameter includeTimestamp: (query) Include timestamp. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProperties(did: String, includeTimestamp: Bool? = nil, completion: @escaping ((_ data: MetadataEnvelope?, _ error: Error?) -> Void)) {
        getPropertiesWithRequestBuilder(did: did, includeTimestamp: includeTimestamp).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Read a device's properties.
     
     - parameter did: (path) Device ID. 
     - parameter includeTimestamp: (query) Include timestamp. (optional)
     - returns: Promise<MetadataEnvelope>
     */
    open class func getProperties(did: String, includeTimestamp: Bool? = nil) -> Promise<MetadataEnvelope> {
        let deferred = Promise<MetadataEnvelope>.pending()
        getProperties(did: did, includeTimestamp: includeTimestamp) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Read a device's properties.
     - GET /devicemgmt/devices/{did}/properties
     - Read a device's properties.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "key" : "{}"
  }
}}]
     
     - parameter did: (path) Device ID. 
     - parameter includeTimestamp: (query) Include timestamp. (optional)

     - returns: RequestBuilder<MetadataEnvelope> 
     */
    open class func getPropertiesWithRequestBuilder(did: String, includeTimestamp: Bool? = nil) -> RequestBuilder<MetadataEnvelope> {
        var path = "/devicemgmt/devices/{did}/properties"
        path = path.replacingOccurrences(of: "{did}", with: "\(did)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "includeTimestamp": includeTimestamp
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<MetadataEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns the details and status of a task id and the individual statuses of each device id in the list.
     
     - parameter tid: (path) Task ID. 
     - parameter count: (query) Max results count. (optional)
     - parameter offset: (query) Result starting offset. (optional)
     - parameter status: (query) Status filter. Comma-separated statuses. (optional)
     - parameter dids: (query) Devices filter. Comma-separated device IDs. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStatuses(tid: String, count: Int32? = nil, offset: Int32? = nil, status: String? = nil, dids: String? = nil, completion: @escaping ((_ data: TaskStatusesEnvelope?, _ error: Error?) -> Void)) {
        getStatusesWithRequestBuilder(tid: tid, count: count, offset: offset, status: status, dids: dids).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Returns the details and status of a task id and the individual statuses of each device id in the list.
     
     - parameter tid: (path) Task ID. 
     - parameter count: (query) Max results count. (optional)
     - parameter offset: (query) Result starting offset. (optional)
     - parameter status: (query) Status filter. Comma-separated statuses. (optional)
     - parameter dids: (query) Devices filter. Comma-separated device IDs. (optional)
     - returns: Promise<TaskStatusesEnvelope>
     */
    open class func getStatuses(tid: String, count: Int32? = nil, offset: Int32? = nil, status: String? = nil, dids: String? = nil) -> Promise<TaskStatusesEnvelope> {
        let deferred = Promise<TaskStatusesEnvelope>.pending()
        getStatuses(tid: tid, count: count, offset: offset, status: status, dids: dids) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Returns the details and status of a task id and the individual statuses of each device id in the list.
     - GET /devicemgmt/tasks/{tid}/statuses
     - Returns the details and status of a task id and the individual statuses of each device id in the list.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "data" : {
    "filter" : "aeiou",
    "taskType" : "aeiou",
    "modifiedOn" : 123456789,
    "dtid" : "aeiou",
    "statusCounts" : {
      "numFailed" : 123,
      "numCancelled" : 123,
      "totalDevices" : 123,
      "numCompleted" : 123,
      "numSucceeded" : 123
    },
    "property" : "aeiou",
    "statuses" : [ {
      "numAttempts" : 123,
      "errorMessage" : "aeiou",
      "errorCode" : "aeiou",
      "did" : "aeiou",
      "status" : "aeiou",
      "ts" : 123456789
    } ],
    "id" : "aeiou",
    "dids" : [ "aeiou" ],
    "taskParameters" : {
      "expiresAfter" : 123,
      "value" : "aeiou"
    },
    "createdOn" : 123456789,
    "status" : "aeiou"
  },
  "offset" : 123,
  "count" : 123
}}]
     
     - parameter tid: (path) Task ID. 
     - parameter count: (query) Max results count. (optional)
     - parameter offset: (query) Result starting offset. (optional)
     - parameter status: (query) Status filter. Comma-separated statuses. (optional)
     - parameter dids: (query) Devices filter. Comma-separated device IDs. (optional)

     - returns: RequestBuilder<TaskStatusesEnvelope> 
     */
    open class func getStatusesWithRequestBuilder(tid: String, count: Int32? = nil, offset: Int32? = nil, status: String? = nil, dids: String? = nil) -> RequestBuilder<TaskStatusesEnvelope> {
        var path = "/devicemgmt/tasks/{tid}/statuses"
        path = path.replacingOccurrences(of: "{tid}", with: "\(tid)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "count": count?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "status": status,
            "dids": dids
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TaskStatusesEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns the history of the status changes for a specific task id, or for a specific device id in that task.
     
     - parameter tid: (path) Task ID. 
     - parameter did: (query) Device ID. Optional. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStatusesHistory(tid: String, did: String? = nil, completion: @escaping ((_ data: TaskStatusesHistoryEnvelope?, _ error: Error?) -> Void)) {
        getStatusesHistoryWithRequestBuilder(tid: tid, did: did).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Returns the history of the status changes for a specific task id, or for a specific device id in that task.
     
     - parameter tid: (path) Task ID. 
     - parameter did: (query) Device ID. Optional. (optional)
     - returns: Promise<TaskStatusesHistoryEnvelope>
     */
    open class func getStatusesHistory(tid: String, did: String? = nil) -> Promise<TaskStatusesHistoryEnvelope> {
        let deferred = Promise<TaskStatusesHistoryEnvelope>.pending()
        getStatusesHistory(tid: tid, did: did) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Returns the history of the status changes for a specific task id, or for a specific device id in that task.
     - GET /devicemgmt/tasks/{tid}/statuses/history
     - Returns the history of the status changes for a specific task id, or for a specific device id in that task.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "history" : [ {
      "numAttempts" : 123,
      "errorMessage" : "aeiou",
      "errorCode" : "aeiou",
      "did" : "aeiou",
      "status" : "aeiou",
      "ts" : 123456789
    } ]
  }
}}]
     
     - parameter tid: (path) Task ID. 
     - parameter did: (query) Device ID. Optional. (optional)

     - returns: RequestBuilder<TaskStatusesHistoryEnvelope> 
     */
    open class func getStatusesHistoryWithRequestBuilder(tid: String, did: String? = nil) -> RequestBuilder<TaskStatusesHistoryEnvelope> {
        var path = "/devicemgmt/tasks/{tid}/statuses/history"
        path = path.replacingOccurrences(of: "{tid}", with: "\(tid)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "did": did
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TaskStatusesHistoryEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns the details and global status of a specific task id.
     
     - parameter tid: (path) Task ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskByID(tid: String, completion: @escaping ((_ data: TaskEnvelope?, _ error: Error?) -> Void)) {
        getTaskByIDWithRequestBuilder(tid: tid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Returns the details and global status of a specific task id.
     
     - parameter tid: (path) Task ID. 
     - returns: Promise<TaskEnvelope>
     */
    open class func getTaskByID(tid: String) -> Promise<TaskEnvelope> {
        let deferred = Promise<TaskEnvelope>.pending()
        getTaskByID(tid: tid) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Returns the details and global status of a specific task id.
     - GET /devicemgmt/tasks/{tid}
     - Returns the details and global status of a specific task id.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "filter" : "aeiou",
    "taskType" : "aeiou",
    "modifiedOn" : 123456789,
    "dtid" : "aeiou",
    "statusCounts" : {
      "numFailed" : 123,
      "numCancelled" : 123,
      "totalDevices" : 123,
      "numCompleted" : 123,
      "numSucceeded" : 123
    },
    "property" : "aeiou",
    "id" : "aeiou",
    "dids" : [ "aeiou" ],
    "taskParameters" : {
      "expiresAfter" : 123,
      "value" : "aeiou"
    },
    "createdOn" : 123456789,
    "status" : "aeiou"
  }
}}]
     
     - parameter tid: (path) Task ID. 

     - returns: RequestBuilder<TaskEnvelope> 
     */
    open class func getTaskByIDWithRequestBuilder(tid: String) -> RequestBuilder<TaskEnvelope> {
        var path = "/devicemgmt/tasks/{tid}"
        path = path.replacingOccurrences(of: "{tid}", with: "\(tid)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path

        let requestBuilder: RequestBuilder<TaskEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: nil, isBody: true)
    }

    /**
     Returns the all the tasks for a device type.
     
     - parameter dtid: (query) Device Type ID. 
     - parameter count: (query) Max results count. (optional)
     - parameter offset: (query) Result starting offset. (optional)
     - parameter status: (query) Status filter. Comma-separated statuses. (optional)
     - parameter order: (query) Sort results by a field. Valid fields: createdOn. (optional)
     - parameter sort: (query) Sort order. Valid values: asc or desc. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTasks(dtid: String, count: Int32? = nil, offset: Int32? = nil, status: String? = nil, order: String? = nil, sort: String? = nil, completion: @escaping ((_ data: TaskListEnvelope?, _ error: Error?) -> Void)) {
        getTasksWithRequestBuilder(dtid: dtid, count: count, offset: offset, status: status, order: order, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Returns the all the tasks for a device type.
     
     - parameter dtid: (query) Device Type ID. 
     - parameter count: (query) Max results count. (optional)
     - parameter offset: (query) Result starting offset. (optional)
     - parameter status: (query) Status filter. Comma-separated statuses. (optional)
     - parameter order: (query) Sort results by a field. Valid fields: createdOn. (optional)
     - parameter sort: (query) Sort order. Valid values: asc or desc. (optional)
     - returns: Promise<TaskListEnvelope>
     */
    open class func getTasks(dtid: String, count: Int32? = nil, offset: Int32? = nil, status: String? = nil, order: String? = nil, sort: String? = nil) -> Promise<TaskListEnvelope> {
        let deferred = Promise<TaskListEnvelope>.pending()
        getTasks(dtid: dtid, count: count, offset: offset, status: status, order: order, sort: sort) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Returns the all the tasks for a device type.
     - GET /devicemgmt/tasks
     - Returns the all the tasks for a device type.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "data" : {
    "tasks" : [ {
      "filter" : "aeiou",
      "taskType" : "aeiou",
      "modifiedOn" : 123456789,
      "dtid" : "aeiou",
      "statusCounts" : {
        "numFailed" : 123,
        "numCancelled" : 123,
        "totalDevices" : 123,
        "numCompleted" : 123,
        "numSucceeded" : 123
      },
      "property" : "aeiou",
      "id" : "aeiou",
      "dids" : [ "aeiou" ],
      "taskParameters" : {
        "expiresAfter" : 123,
        "value" : "aeiou"
      },
      "createdOn" : 123456789,
      "status" : "aeiou"
    } ]
  },
  "statusCounts" : {
    "CANCELLED" : 123,
    "COMPLETE" : 123,
    "PROCESSING" : 123,
    "REQUESTED" : 123
  },
  "offset" : 123,
  "count" : 123
}}]
     
     - parameter dtid: (query) Device Type ID. 
     - parameter count: (query) Max results count. (optional)
     - parameter offset: (query) Result starting offset. (optional)
     - parameter status: (query) Status filter. Comma-separated statuses. (optional)
     - parameter order: (query) Sort results by a field. Valid fields: createdOn. (optional)
     - parameter sort: (query) Sort order. Valid values: asc or desc. (optional)

     - returns: RequestBuilder<TaskListEnvelope> 
     */
    open class func getTasksWithRequestBuilder(dtid: String, count: Int32? = nil, offset: Int32? = nil, status: String? = nil, order: String? = nil, sort: String? = nil) -> RequestBuilder<TaskListEnvelope> {
        let path = "/devicemgmt/tasks"
        let URLString = ArtikCloudAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "dtid": dtid,
            "count": count?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "status": status,
            "order": order,
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TaskListEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Query device properties across devices.
     
     - parameter dtid: (query) Device Type ID. 
     - parameter count: (query) Max results count. (optional)
     - parameter offset: (query) Result starting offset. (optional)
     - parameter filter: (query) Query filter. Comma-separated key&#x3D;value pairs (optional)
     - parameter includeTimestamp: (query) Include timestamp. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryProperties(dtid: String, count: Int32? = nil, offset: Int32? = nil, filter: String? = nil, includeTimestamp: Bool? = nil, completion: @escaping ((_ data: MetadataQueryEnvelope?, _ error: Error?) -> Void)) {
        queryPropertiesWithRequestBuilder(dtid: dtid, count: count, offset: offset, filter: filter, includeTimestamp: includeTimestamp).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Query device properties across devices.
     
     - parameter dtid: (query) Device Type ID. 
     - parameter count: (query) Max results count. (optional)
     - parameter offset: (query) Result starting offset. (optional)
     - parameter filter: (query) Query filter. Comma-separated key&#x3D;value pairs (optional)
     - parameter includeTimestamp: (query) Include timestamp. (optional)
     - returns: Promise<MetadataQueryEnvelope>
     */
    open class func queryProperties(dtid: String, count: Int32? = nil, offset: Int32? = nil, filter: String? = nil, includeTimestamp: Bool? = nil) -> Promise<MetadataQueryEnvelope> {
        let deferred = Promise<MetadataQueryEnvelope>.pending()
        queryProperties(dtid: dtid, count: count, offset: offset, filter: filter, includeTimestamp: includeTimestamp) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Query device properties across devices.
     - GET /devicemgmt/devices/properties
     - Query device properties across devices.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "data" : {
    "key" : "{}"
  },
  "offset" : 123,
  "count" : 123
}}]
     
     - parameter dtid: (query) Device Type ID. 
     - parameter count: (query) Max results count. (optional)
     - parameter offset: (query) Result starting offset. (optional)
     - parameter filter: (query) Query filter. Comma-separated key&#x3D;value pairs (optional)
     - parameter includeTimestamp: (query) Include timestamp. (optional)

     - returns: RequestBuilder<MetadataQueryEnvelope> 
     */
    open class func queryPropertiesWithRequestBuilder(dtid: String, count: Int32? = nil, offset: Int32? = nil, filter: String? = nil, includeTimestamp: Bool? = nil) -> RequestBuilder<MetadataQueryEnvelope> {
        let path = "/devicemgmt/devices/properties"
        let URLString = ArtikCloudAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "dtid": dtid,
            "count": count?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "filter": filter,
            "includeTimestamp": includeTimestamp
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<MetadataQueryEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Updates a device type information
     
     - parameter dtid: (path) Device type ID. 
     - parameter deviceTypeInfo: (body) Device type info object to be set 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDeviceTypesInfo(dtid: String, deviceTypeInfo: DeviceTypesInfo, completion: @escaping ((_ data: DeviceTypesInfoEnvelope?, _ error: Error?) -> Void)) {
        updateDeviceTypesInfoWithRequestBuilder(dtid: dtid, deviceTypeInfo: deviceTypeInfo).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Updates a device type information
     
     - parameter dtid: (path) Device type ID. 
     - parameter deviceTypeInfo: (body) Device type info object to be set 
     - returns: Promise<DeviceTypesInfoEnvelope>
     */
    open class func updateDeviceTypesInfo(dtid: String, deviceTypeInfo: DeviceTypesInfo) -> Promise<DeviceTypesInfoEnvelope> {
        let deferred = Promise<DeviceTypesInfoEnvelope>.pending()
        updateDeviceTypesInfo(dtid: dtid, deviceTypeInfo: deviceTypeInfo) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Updates a device type information
     - PUT /devicemgmt/devicetypes/{dtid}
     - Updates a device type information
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "devicePropertiesEnabled" : true,
    "pmax" : 123,
    "modifiedOn" : 123456789,
    "dtid" : "aeiou",
    "pmin" : 123,
    "taskExpiresAfter" : 123,
    "createdOn" : 123456789
  }
}}]
     
     - parameter dtid: (path) Device type ID. 
     - parameter deviceTypeInfo: (body) Device type info object to be set 

     - returns: RequestBuilder<DeviceTypesInfoEnvelope> 
     */
    open class func updateDeviceTypesInfoWithRequestBuilder(dtid: String, deviceTypeInfo: DeviceTypesInfo) -> RequestBuilder<DeviceTypesInfoEnvelope> {
        var path = "/devicemgmt/devicetypes/{dtid}"
        path = path.replacingOccurrences(of: "{dtid}", with: "\(dtid)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
        
        let parameters = deviceTypeInfo.encodeToJSON() as? [String:Any]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DeviceTypesInfoEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Updates a device's server properties.
     
     - parameter did: (path) Device ID. 
     - parameter deviceProperties: (body) Device properties object to be set 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateServerProperties(did: String, deviceProperties: [String:AnyObject], completion: @escaping ((_ data: MetadataEnvelope?, _ error: Error?) -> Void)) {
        updateServerPropertiesWithRequestBuilder(did: did, deviceProperties: deviceProperties).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Updates a device's server properties.
     
     - parameter did: (path) Device ID. 
     - parameter deviceProperties: (body) Device properties object to be set 
     - returns: Promise<MetadataEnvelope>
     */
    open class func updateServerProperties(did: String, deviceProperties: [String:AnyObject]) -> Promise<MetadataEnvelope> {
        let deferred = Promise<MetadataEnvelope>.pending()
        updateServerProperties(did: did, deviceProperties: deviceProperties) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Updates a device's server properties.
     - POST /devicemgmt/devices/{did}/serverproperties
     - Updates a device's server properties.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "key" : "{}"
  }
}}]
     
     - parameter did: (path) Device ID. 
     - parameter deviceProperties: (body) Device properties object to be set 

     - returns: RequestBuilder<MetadataEnvelope> 
     */
    open class func updateServerPropertiesWithRequestBuilder(did: String, deviceProperties: [String:AnyObject]) -> RequestBuilder<MetadataEnvelope> {
        var path = "/devicemgmt/devices/{did}/serverproperties"
        path = path.replacingOccurrences(of: "{did}", with: "\(did)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
        
        let parameters = deviceProperties.encodeToJSON() as? [String:Any]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<MetadataEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Updates a task for all devices - For now just allows changing the state to cancelled.
     
     - parameter tid: (path) Task ID. 
     - parameter taskUpdateRequest: (body) Task update request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTask(tid: String, taskUpdateRequest: TaskUpdateRequest, completion: @escaping ((_ data: TaskUpdateResponse?, _ error: Error?) -> Void)) {
        updateTaskWithRequestBuilder(tid: tid, taskUpdateRequest: taskUpdateRequest).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Updates a task for all devices - For now just allows changing the state to cancelled.
     
     - parameter tid: (path) Task ID. 
     - parameter taskUpdateRequest: (body) Task update request 
     - returns: Promise<TaskUpdateResponse>
     */
    open class func updateTask(tid: String, taskUpdateRequest: TaskUpdateRequest) -> Promise<TaskUpdateResponse> {
        let deferred = Promise<TaskUpdateResponse>.pending()
        updateTask(tid: tid, taskUpdateRequest: taskUpdateRequest) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Updates a task for all devices - For now just allows changing the state to cancelled.
     - PUT /devicemgmt/tasks/{tid}
     - Updates a task for all devices - For now just allows changing the state to cancelled.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "filter" : "aeiou",
    "taskType" : "aeiou",
    "modifiedOn" : 123456789,
    "dtid" : "aeiou",
    "statusCounts" : {
      "numFailed" : 123,
      "numCancelled" : 123,
      "totalDevices" : 123,
      "numCompleted" : 123,
      "numSucceeded" : 123
    },
    "property" : "aeiou",
    "id" : "aeiou",
    "dids" : [ "aeiou" ],
    "taskParameters" : {
      "expiresAfter" : 123,
      "value" : "aeiou"
    },
    "createdOn" : 123456789,
    "status" : "aeiou"
  }
}}]
     
     - parameter tid: (path) Task ID. 
     - parameter taskUpdateRequest: (body) Task update request 

     - returns: RequestBuilder<TaskUpdateResponse> 
     */
    open class func updateTaskWithRequestBuilder(tid: String, taskUpdateRequest: TaskUpdateRequest) -> RequestBuilder<TaskUpdateResponse> {
        var path = "/devicemgmt/tasks/{tid}"
        path = path.replacingOccurrences(of: "{tid}", with: "\(tid)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
        
        let parameters = taskUpdateRequest.encodeToJSON() as? [String:Any]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TaskUpdateResponse>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Updates a task for a specific device - For now just allows changing the state to cancelled.
     
     - parameter tid: (path) Task ID. 
     - parameter did: (path) Device ID. 
     - parameter deviceTaskUpdateRequest: (body) Device task update request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTaskForDevice(tid: String, did: String, deviceTaskUpdateRequest: DeviceTaskUpdateRequest, completion: @escaping ((_ data: DeviceTaskUpdateResponse?, _ error: Error?) -> Void)) {
        updateTaskForDeviceWithRequestBuilder(tid: tid, did: did, deviceTaskUpdateRequest: deviceTaskUpdateRequest).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Updates a task for a specific device - For now just allows changing the state to cancelled.
     
     - parameter tid: (path) Task ID. 
     - parameter did: (path) Device ID. 
     - parameter deviceTaskUpdateRequest: (body) Device task update request 
     - returns: Promise<DeviceTaskUpdateResponse>
     */
    open class func updateTaskForDevice(tid: String, did: String, deviceTaskUpdateRequest: DeviceTaskUpdateRequest) -> Promise<DeviceTaskUpdateResponse> {
        let deferred = Promise<DeviceTaskUpdateResponse>.pending()
        updateTaskForDevice(tid: tid, did: did, deviceTaskUpdateRequest: deviceTaskUpdateRequest) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     Updates a task for a specific device - For now just allows changing the state to cancelled.
     - PUT /devicemgmt/tasks/{tid}/devices/{did}
     - Updates a task for a specific device - For now just allows changing the state to cancelled.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "numAttempts" : 123,
    "errorMessage" : "aeiou",
    "errorCode" : "aeiou",
    "did" : "aeiou",
    "status" : "aeiou",
    "ts" : 123456789
  }
}}]
     
     - parameter tid: (path) Task ID. 
     - parameter did: (path) Device ID. 
     - parameter deviceTaskUpdateRequest: (body) Device task update request 

     - returns: RequestBuilder<DeviceTaskUpdateResponse> 
     */
    open class func updateTaskForDeviceWithRequestBuilder(tid: String, did: String, deviceTaskUpdateRequest: DeviceTaskUpdateRequest) -> RequestBuilder<DeviceTaskUpdateResponse> {
        var path = "/devicemgmt/tasks/{tid}/devices/{did}"
        path = path.replacingOccurrences(of: "{tid}", with: "\(tid)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{did}", with: "\(did)", options: .literal, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
        
        let parameters = deviceTaskUpdateRequest.encodeToJSON() as? [String:Any]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DeviceTaskUpdateResponse>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
