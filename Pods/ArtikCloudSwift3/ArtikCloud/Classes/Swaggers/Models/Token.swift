//
// Token.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/**  */
open class Token: NSObject, NSCoding, JSONEncodable {
    open var accessToken: String?
    open var expiresIn: Int64?
    open var scope: String?
    open var tokenType: String?
    open var refreshToken: String?

    struct PropertyKey {
        static let accessToken_key = "_accessToken"
        static let expiresIn_key = "_expiresIn"
        static let scope_key = "_scope"
        static let tokenType_key = "_tokenType"
        static let refreshToken_key = "_refreshToken"
    }
    
    public override init() {
        super.init()
    }
    
    init(accessToken: String?, expiresIn: Int64?, scope: String?, tokenType: String?, refreshToken: String?) {
        super.init()
        self.accessToken = accessToken
        self.expiresIn = expiresIn
        self.scope = scope
        self.tokenType = tokenType
        self.refreshToken = refreshToken
    }

    // MARK: JSONEncodable
    func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["access_token"] = self.accessToken 
        nillableDictionary["expires_in"] = self.expiresIn?.encodeToJSON()
        nillableDictionary["scope"] = self.scope 
        nillableDictionary["token_type"] = self.tokenType 
        nillableDictionary["refresh_token"] = self.refreshToken 
        let dictionary = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
    
    // MARK: NSObject Methods
    open func encode(with aCoder: NSCoder) {
        aCoder.encode(accessToken, forKey: PropertyKey.accessToken_key)
        aCoder.encode(scope, forKey: PropertyKey.scope_key)
        aCoder.encode(tokenType, forKey: PropertyKey.tokenType_key)
        aCoder.encode(refreshToken, forKey: PropertyKey.refreshToken_key)
        
        if let expiresIn = expiresIn {
            aCoder.encode(expiresIn, forKey: PropertyKey.expiresIn_key)
        }
    }
    
    required convenience public init(coder aDecoder: NSCoder) {
        let accessToken = aDecoder.decodeObject(forKey: PropertyKey.accessToken_key) as? String
        let scope = aDecoder.decodeObject(forKey: PropertyKey.scope_key) as? String
        let tokenType = aDecoder.decodeObject(forKey: PropertyKey.tokenType_key) as? String
        let refreshToken = aDecoder.decodeObject(forKey: PropertyKey.refreshToken_key) as? String
        
        var expiresIn: Int64?
        if aDecoder.containsValue(forKey: PropertyKey.expiresIn_key) {
            expiresIn = aDecoder.decodeInt64(forKey: PropertyKey.expiresIn_key)
        }
        
        self.init(accessToken: accessToken, expiresIn: expiresIn, scope: scope, tokenType: tokenType, refreshToken: refreshToken)
    }
}
