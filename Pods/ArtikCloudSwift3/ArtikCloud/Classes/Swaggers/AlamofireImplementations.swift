// AlamofireImplementations.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

class AlamofireRequestBuilderFactory: RequestBuilderFactory {
    func getBuilder<T>() -> RequestBuilder<T>.Type {
        return AlamofireRequestBuilder<T>.self
    }
}

// Store manager to retain its reference
private var managerStore: [String: Alamofire.SessionManager] = [:]

class AlamofireRequestBuilder<T>: RequestBuilder<T> {
    required init(method: String, URLString: String, parameters: [String : Any]?, isBody: Bool) {
        super.init(method: method, URLString: URLString, parameters: parameters, isBody: isBody)
    }

    override func execute(_ completion: @escaping (_ response: Response<T>?, _ error: Error?) -> Void) {
        let managerId = UUID().uuidString
        // Create a new manager for each request to customize its request header
        let configuration = URLSessionConfiguration.default
        configuration.httpAdditionalHeaders = buildHeaders()
        let manager = Alamofire.SessionManager(configuration: configuration)
        managerStore[managerId] = manager

        let encoding: ParameterEncoding = isBody ? JSONEncoding() : URLEncoding()
        let xMethod = Alamofire.HTTPMethod(rawValue: method)
        let fileKeys = parameters == nil ? [] : parameters!.filter { $1 is NSURL }.map { $0.0 }

        if fileKeys.count > 0 {
            let form: (MultipartFormData) -> Void = { mpForm in
                for (k, v) in self.parameters! {
                    switch v {
                    case let fileURL as URL:
                        mpForm.append(fileURL, withName: k)
                        break
                    case let string as NSString:
                        mpForm.append(string.data(using: String.Encoding.utf8.rawValue)!, withName: k)
                        break
                    case let number as NSNumber:
                        mpForm.append(number.stringValue.data(using: String.Encoding.utf8)!, withName: k)
                        break
                    default:
                        fatalError("Unprocessable value \(v) with key \(k)")
                        break
                    }
                }
            }
            
            manager.upload(
                multipartFormData: form,
                usingThreshold: SessionManager.multipartFormDataEncodingMemoryThreshold,
                to: URLString,
                method: xMethod!,
                encodingCompletion: { encodingResult in
                    switch encodingResult {
                    case .success(let uploadRequest, _, _):
                        if let onProgressReady = self.onProgressReady {
                            onProgressReady(uploadRequest.progress)
                        }
                        self.processRequest(uploadRequest, managerId, completion)
                    case .failure(let encodingError):
                        completion(nil, encodingError)
                    }
            }
            )
        } else {
            //print("---- MAKING REQUEST: ----\nurl: \(URLString)\nmethod: \(xMethod!)\nparameters: \(parameters)\nencoding: \(encoding)\n---- END OF REQUEST ----")
            let request = manager.request(URLString, method: xMethod!, parameters: parameters, encoding: encoding)
            if let onProgressReady = self.onProgressReady {
                onProgressReady(request.progress)
            }
            processRequest(request, managerId, completion)
        }

    }

    fileprivate func processRequest(_ request: DataRequest, _ managerId: String, _ completion: @escaping (_ response: Response<T>?, _ error: Error?) -> Void) {
        if let credential = self.credential {
            request.authenticate(usingCredential: credential)
        }

        let cleanupRequest = {
            managerStore.removeValue(forKey: managerId)
        }

        let validatedRequest = request.validate()

        switch T.self {
        case is Data.Type:
            validatedRequest.responseData { dataResponse in
                cleanupRequest()

                if (dataResponse.result.isFailure) {
                    completion(nil, dataResponse.result.error)
                    return
                }
                completion(Response(response: dataResponse.response!, body: dataResponse.data as! T), nil)
            }
        default:
            validatedRequest.responseJSON(options: .allowFragments) { response in
                cleanupRequest()
                
                if response.result.isFailure {
                    completion(nil, response.result.error)
                    return
                }
                
                if response.response?.statusCode == 204 && response.result.value is NSNull {
                    completion(nil, nil)
                    return
                }

                if () is T {
                    completion(Response(response: response.response!, body: () as! T), nil)
                    return
                }
                
                if let json: Any = response.result.value {
                    let body = Decoders.decode(clazz: T.self, source: json)
                    completion(Response(response: response.response!, body: body), nil)
                    return
                } else if "" is T {
                    // swagger-parser currently doesn't support void, which will be fixed in future swagger-parser release
                    // https://github.com/swagger-api/swagger-parser/pull/34
                    completion(Response(response: response.response!, body: "" as! T), nil)
                    return
                }

                completion(nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "unreacheable code"]))
            }
        }
    }

    fileprivate func buildHeaders() -> [String: String] {
        var httpHeaders = SessionManager.defaultHTTPHeaders
        for (key, value) in self.headers {
            httpHeaders[key] = value
        }
        return httpHeaders
    }
}
