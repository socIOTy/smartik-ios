// Extensions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit

extension Bool: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension Float: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension Int: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension Int32: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension Int64: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension Double: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension String: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

private func encodeIfPossible<T>(_ object: T) -> Any {
    if let object = object as? JSONEncodable {
        return object.encodeToJSON()
    } else {
        return object as Any
    }
}

extension Array: JSONEncodable {
    func encodeToJSON() -> Any {
        return self.map(encodeIfPossible) as! Any
    }
}

extension Dictionary: JSONEncodable {
    func encodeToJSON() -> Any {
        var dictionary = [AnyHashable: Any]()
        for (key, value) in self {
            dictionary[key] = encodeIfPossible(value)
        }
        return dictionary as Any
    }
}

extension Data: JSONEncodable {
    func encodeToJSON() -> Any {
        return self.base64EncodedString(options: NSData.Base64EncodingOptions()) as Any
    }
}

private let dateFormatter: DateFormatter = {
    let fmt = DateFormatter()
    fmt.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ"
    fmt.locale = Locale(identifier: "en_US_POSIX")
    return fmt
}()

extension Date: JSONEncodable {
    func encodeToJSON() -> Any {
        return dateFormatter.string(from: self)
    }
}

extension UUID: JSONEncodable {
    func encodeToJSON() -> Any {
        return self.uuidString
    }
}

extension RequestBuilder {
    public func execute() -> Promise<Response<T>>  {
        let deferred = Promise<Response<T>>.pending()
        self.execute { (response: Response<T>?, error: Error?) in
            if let response = response {
                deferred.fulfill(response)
            } else {
                deferred.reject(error!)
            }
        }
        return deferred.promise
    }
}
